fragment userFields on authUsers {
  id
  createdAt
  disabled
  displayName
  avatarUrl
  email
  passwordHash
  emailVerified
  phoneNumber
  phoneNumberVerified
  defaultRole
  isAnonymous
  ticket
  otpHash
  totpSecret
  activeMfaType
  newEmail
  locale
  metadata
  roles {
    role
  }
}

query user($id: uuid!) {
  authUser(id: $id) {
    ...userFields
  }
}

query users($where: authUsers_bool_exp!) {
  authUsers(where: $where) {
    ...userFields
  }
}

mutation getUsersByRefreshTokenAndUpdateRefreshTokenExpiresAt(
  $refreshTokenHash: String!
  $expiresAt: timestamptz!
) {
  updateAuthRefreshTokens(
    _set: { expiresAt: $expiresAt }
    where: {
      _and: [
        { refreshTokenHash: { _eq: $refreshTokenHash } }
        { user: { disabled: { _eq: false } } }
        { expiresAt: { _gte: now } }
      ]
    }
  ) {
    affected_rows
  }
}

query getUsersByRefreshToken($refreshTokenHash: String!) {
  authRefreshTokens(
    where: {
      _and: [
        { refreshTokenHash: { _eq: $refreshTokenHash } }
        { user: { disabled: { _eq: false } } }
        { expiresAt: { _gte: now } }
      ]
    }
  ) {
    refreshToken
    user {
      ...userFields
    }
  }
}

query getUsersByPAT($patHash: String!) {
  authRefreshTokens(
    where: {
      _and: [
        { refreshTokenHash: { _eq: $patHash } }
        { user: { disabled: { _eq: false } } }
        { expiresAt: { _gte: now } }
        { type: { _eq: "pat" } }
      ]
    }
  ) {
    refreshToken
    user {
      ...userFields
    }
  }
}

mutation updateUser($id: uuid!, $user: authUsers_set_input!) {
  updateAuthUser(pk_columns: { id: $id }, _set: $user) {
    ...userFields
  }
}

mutation updateUserWhere($where: authUsers_bool_exp!, $user: authUsers_set_input!) {
  updateAuthUsers(where: $where, _set: $user) {
    affected_rows
  }
}

mutation rotateUsersTicket(
  $oldTicket: String!
  $newTicket: String!
  $newTicketExpiresAt: timestamptz!
) {
  updateAuthUsers(
    _set: { ticket: $newTicket, ticketExpiresAt: $newTicketExpiresAt }
    where: { ticket: { _eq: $oldTicket } }
  ) {
    affected_rows
  }
}

mutation changeEmailsByTicket(
  $ticket: String!
  $email: citext!
  $newTicket: String!
  $now: timestamptz!
) {
  updateAuthUsers(
    where: {
      _and: [{ ticket: { _eq: $ticket } }, { ticketExpiresAt: { _gt: $now } }]
    }
    _set: {
      email: $email
      newEmail: null
      ticket: $newTicket
      ticketExpiresAt: $now
    }
  ) {
    returning {
      ...userFields
    }
  }
}

mutation insertUser($user: authUsers_insert_input!) {
  insertAuthUser(object: $user) {
    ...userFields
  }
}

mutation deleteUser($userId: uuid!) {
  deleteAuthUserRoles(where: { userId: { _eq: $userId } }) {
    affected_rows
  }

  deleteAuthUser(id: $userId) {
    ...userFields
  }
}

mutation deanonymizeUser($userId: uuid!, $avatarUrl: String, $role: String!) {
  updateAuthUserRoles(
    where: { user: { id: { _eq: $userId } } }
    _set: { role: $role }
  ) {
    affected_rows
  }

  updateAuthUser(
    pk_columns: { id: $userId }
    _set: { avatarUrl: $avatarUrl, defaultRole: $role }
  ) {
    id
  }
}

mutation insertUserProviderToUser(
  $userProvider: authUserProviders_insert_input!
) {
  insertAuthUserProvider(object: $userProvider) {
    id
  }
}

query getUserByTicket($ticket: String!) {
  authUsers(where: { ticket: { _eq: $ticket } }) {
    ...userFields
  }
}

mutation updateUsersByTicket($ticket: String!, $user: authUsers_set_input!) {
  updateAuthUsers(
    where: {
      _and: [{ ticket: { _eq: $ticket } }, { ticketExpiresAt: { _gt: now } }]
    }
    _set: $user
  ) {
    affected_rows
    returning {
      ...userFields
    }
  }
}
