name: Build
on:
  pull_request:
    branches: [main]
    paths:
      - '**'
      - '!docs/**'
      - '!examples/**'
      - '!*.md'
  push:
    branches: [main]
    paths:
      - '**'
      - '!docs/**'
      - '!examples/**'
      - '!*.md'
  release:
    types: [published]
env:
  HASURA_GRAPHQL_ADMIN_SECRET: test_secret_key
  JWT_ALGORITHM: HS256
  JWT_KEY: never_use_this_secret_key_in_production_this_is_only_for_CI_testing_098hu32r4389ufb4n38994321
  POSTGRES_PASSWORD: postgrespassword
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      postgres:
        image: nhost/postgres:12-v0.0.6
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: --restart always --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      graphql-engine:
        image: hasura/graphql-engine:v2.0.1
        env:
          HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${{ env.POSTGRES_PASSWORD }}@postgres:5432/postgres
          HASURA_GRAPHQL_JWT_SECRET: '{"type": "${{ env.JWT_ALGORITHM }}", "key": "${{ env.JWT_KEY }}"}'
        options: >-
          --restart always
      mailhog:
        image: mailhog/mailhog
        env:
          SMTP_HOST: mailhog
          SMTP_PORT: 1025
          SMTP_PASS: password
          SMTP_USER: user
          SMTP_SECURE: 'false'
          SMTP_SENDER: hbp@hbp.com
    container:
      image: node:14
      env:
        AUTH_HOST: 0.0.0.0
        AUTH_PORT: 4000

        HASURA_GRAPHQL_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
        HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${{env.POSTGRES_PASSWORD }}@postgres:5432/postgres
        HASURA_GRAPHQL_GRAPHQL_URL: 'http://graphql-engine:8080/v1/graphql'
        HASURA_GRAPHQL_JWT_SECRET: '{"type": "${{ env.JWT_ALGORITHM }}", "key": "${{ env.JWT_KEY }}"}'
        AUTH_EMAILS_ENABLED: true
        AUTH_SMTP_HOST: mailhog
        AUTH_SMTP_PORT: 1025
        AUTH_SMTP_USER: user
        AUTH_SMTP_PASS: password
        AUTH_SMTP_SENDER: hasura-auth@example.com
        AUTH_SMTP_SECURE: false
        AUTH_CLIENT_URL: http://localhost:3000
      options: --hostname hasura-auth
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn
      # - name: Lint files
      #   run: yarn run lint
      - name: Run Jest tests
        run: yarn run test --coverage
      - name: Upload test results
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage
  coverage:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage results
        uses: actions/download-artifact@v1
        with:
          name: coverage
      - name: Publish to CodeCov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage/clover.xml
  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and publish to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: nhost/hasura-auth
          path: .
          dockerfile: docker/prod/Dockerfile
          tag_with_ref: true
          tag_with_sha: true
