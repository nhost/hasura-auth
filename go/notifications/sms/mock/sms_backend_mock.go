// Code generated by MockGen. DO NOT EDIT.
// Source: sms.go
//
// Generated by this command:
//
//	mockgen -source=sms.go -destination=mock/sms_backend_mock.go -package=mock GenericSMSProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGenericSMSProvider is a mock of GenericSMSProvider interface.
type MockGenericSMSProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGenericSMSProviderMockRecorder
	isgomock struct{}
}

// MockGenericSMSProviderMockRecorder is the mock recorder for MockGenericSMSProvider.
type MockGenericSMSProviderMockRecorder struct {
	mock *MockGenericSMSProvider
}

// NewMockGenericSMSProvider creates a new mock instance.
func NewMockGenericSMSProvider(ctrl *gomock.Controller) *MockGenericSMSProvider {
	mock := &MockGenericSMSProvider{ctrl: ctrl}
	mock.recorder = &MockGenericSMSProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericSMSProvider) EXPECT() *MockGenericSMSProviderMockRecorder {
	return m.recorder
}

// SendSMS mocks base method.
func (m *MockGenericSMSProvider) SendSMS(to, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSMS", to, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSMS indicates an expected call of SendSMS.
func (mr *MockGenericSMSProviderMockRecorder) SendSMS(to, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*MockGenericSMSProvider)(nil).SendSMS), to, body)
}
