// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/emailer.go --source=controller.go Emailer
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	notifications "github.com/nhost/hasura-auth/go/notifications"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailer is a mock of Emailer interface.
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer.
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance.
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// SendEmailVerify mocks base method.
func (m *MockEmailer) SendEmailVerify(to, locale string, data notifications.EmailVerifyData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailVerify", to, locale, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailVerify indicates an expected call of SendEmailVerify.
func (mr *MockEmailerMockRecorder) SendEmailVerify(to, locale, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailVerify", reflect.TypeOf((*MockEmailer)(nil).SendEmailVerify), to, locale, data)
}
