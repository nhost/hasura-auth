// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"time"

	protocol "github.com/go-webauthn/webauthn/protocol"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes         = "BearerAuth.Scopes"
	BearerAuthElevatedScopes = "BearerAuthElevated.Scopes"
)

// Defines values for AttestationFormat.
const (
	AttestationFormatAndroidKey       AttestationFormat = "android-key"
	AttestationFormatAndroidSafetynet AttestationFormat = "android-safetynet"
	AttestationFormatApple            AttestationFormat = "apple"
	AttestationFormatFidoU2f          AttestationFormat = "fido-u2f"
	AttestationFormatNone             AttestationFormat = "none"
	AttestationFormatPacked           AttestationFormat = "packed"
	AttestationFormatTpm              AttestationFormat = "tpm"
)

// Defines values for AuthenticatorAttachment.
const (
	CrossPlatform AuthenticatorAttachment = "cross-platform"
	Platform      AuthenticatorAttachment = "platform"
)

// Defines values for AuthenticatorTransport.
const (
	AuthenticatorTransportBle       AuthenticatorTransport = "ble"
	AuthenticatorTransportHybrid    AuthenticatorTransport = "hybrid"
	AuthenticatorTransportInternal  AuthenticatorTransport = "internal"
	AuthenticatorTransportNfc       AuthenticatorTransport = "nfc"
	AuthenticatorTransportSmartCard AuthenticatorTransport = "smart-card"
	AuthenticatorTransportUsb       AuthenticatorTransport = "usb"
)

// Defines values for ConveyancePreference.
const (
	ConveyancePreferenceDirect     ConveyancePreference = "direct"
	ConveyancePreferenceEnterprise ConveyancePreference = "enterprise"
	ConveyancePreferenceIndirect   ConveyancePreference = "indirect"
	ConveyancePreferenceNone       ConveyancePreference = "none"
)

// Defines values for CredentialType.
const (
	PublicKey CredentialType = "public-key"
)

// Defines values for ErrorResponseError.
const (
	CannotSendSms                   ErrorResponseError = "cannot-send-sms"
	DefaultRoleMustBeInAllowedRoles ErrorResponseError = "default-role-must-be-in-allowed-roles"
	DisabledEndpoint                ErrorResponseError = "disabled-endpoint"
	DisabledMfaTotp                 ErrorResponseError = "disabled-mfa-totp"
	DisabledUser                    ErrorResponseError = "disabled-user"
	EmailAlreadyInUse               ErrorResponseError = "email-already-in-use"
	EmailAlreadyVerified            ErrorResponseError = "email-already-verified"
	ForbiddenAnonymous              ErrorResponseError = "forbidden-anonymous"
	InternalServerError             ErrorResponseError = "internal-server-error"
	InvalidEmailPassword            ErrorResponseError = "invalid-email-password"
	InvalidOtp                      ErrorResponseError = "invalid-otp"
	InvalidPat                      ErrorResponseError = "invalid-pat"
	InvalidRefreshToken             ErrorResponseError = "invalid-refresh-token"
	InvalidRequest                  ErrorResponseError = "invalid-request"
	InvalidState                    ErrorResponseError = "invalid-state"
	InvalidTicket                   ErrorResponseError = "invalid-ticket"
	InvalidTotp                     ErrorResponseError = "invalid-totp"
	LocaleNotAllowed                ErrorResponseError = "locale-not-allowed"
	MfaTypeNotFound                 ErrorResponseError = "mfa-type-not-found"
	NoTotpSecret                    ErrorResponseError = "no-totp-secret"
	OauthProfileFetchFailed         ErrorResponseError = "oauth-profile-fetch-failed"
	OauthProviderError              ErrorResponseError = "oauth-provider-error"
	OauthTokenEchangeFailed         ErrorResponseError = "oauth-token-echange-failed"
	PasswordInHibpDatabase          ErrorResponseError = "password-in-hibp-database"
	PasswordTooShort                ErrorResponseError = "password-too-short"
	RedirectToNotAllowed            ErrorResponseError = "redirectTo-not-allowed"
	RoleNotAllowed                  ErrorResponseError = "role-not-allowed"
	SignupDisabled                  ErrorResponseError = "signup-disabled"
	TotpAlreadyActive               ErrorResponseError = "totp-already-active"
	UnverifiedUser                  ErrorResponseError = "unverified-user"
	UserNotAnonymous                ErrorResponseError = "user-not-anonymous"
)

// Defines values for IdTokenProvider.
const (
	IdTokenProviderApple  IdTokenProvider = "apple"
	IdTokenProviderGoogle IdTokenProvider = "google"
)

// Defines values for OKResponse.
const (
	OK OKResponse = "OK"
)

// Defines values for PublicKeyCredentialHints.
const (
	PublicKeyCredentialHintsClientDevice PublicKeyCredentialHints = "client-device"
	PublicKeyCredentialHintsHybrid       PublicKeyCredentialHints = "hybrid"
	PublicKeyCredentialHintsSecurityKey  PublicKeyCredentialHints = "security-key"
)

// Defines values for ResidentKeyRequirement.
const (
	ResidentKeyRequirementDiscouraged ResidentKeyRequirement = "discouraged"
	ResidentKeyRequirementPreferred   ResidentKeyRequirement = "preferred"
	ResidentKeyRequirementRequired    ResidentKeyRequirement = "required"
)

// Defines values for UserDeanonymizeRequestSignInMethod.
const (
	EmailPassword UserDeanonymizeRequestSignInMethod = "email-password"
	Passwordless  UserDeanonymizeRequestSignInMethod = "passwordless"
)

// Defines values for UserMfaRequestActiveMfaType.
const (
	Empty UserMfaRequestActiveMfaType = ""
	Totp  UserMfaRequestActiveMfaType = "totp"
)

// Defines values for UserVerificationRequirement.
const (
	UserVerificationRequirementDiscouraged UserVerificationRequirement = "discouraged"
	UserVerificationRequirementPreferred   UserVerificationRequirement = "preferred"
	UserVerificationRequirementRequired    UserVerificationRequirement = "required"
)

// Defines values for SignInProvider.
const (
	SignInProviderApple       SignInProvider = "apple"
	SignInProviderAzuread     SignInProvider = "azuread"
	SignInProviderBitbucket   SignInProvider = "bitbucket"
	SignInProviderDiscord     SignInProvider = "discord"
	SignInProviderFacebook    SignInProvider = "facebook"
	SignInProviderGithub      SignInProvider = "github"
	SignInProviderGitlab      SignInProvider = "gitlab"
	SignInProviderGoogle      SignInProvider = "google"
	SignInProviderLinkedin    SignInProvider = "linkedin"
	SignInProviderSpotify     SignInProvider = "spotify"
	SignInProviderStrava      SignInProvider = "strava"
	SignInProviderTwitch      SignInProvider = "twitch"
	SignInProviderTwitter     SignInProvider = "twitter"
	SignInProviderWindowslive SignInProvider = "windowslive"
	SignInProviderWorkos      SignInProvider = "workos"
)

// Defines values for TicketTypeQuery.
const (
	TicketTypeQueryEmailConfirmChange TicketTypeQuery = "emailConfirmChange"
	TicketTypeQueryEmailVerify        TicketTypeQuery = "emailVerify"
	TicketTypeQueryPasswordReset      TicketTypeQuery = "passwordReset"
	TicketTypeQuerySigninPasswordless TicketTypeQuery = "signinPasswordless"
)

// Defines values for GetSigninProviderProviderParamsProvider.
const (
	GetSigninProviderProviderParamsProviderApple       GetSigninProviderProviderParamsProvider = "apple"
	GetSigninProviderProviderParamsProviderAzuread     GetSigninProviderProviderParamsProvider = "azuread"
	GetSigninProviderProviderParamsProviderBitbucket   GetSigninProviderProviderParamsProvider = "bitbucket"
	GetSigninProviderProviderParamsProviderDiscord     GetSigninProviderProviderParamsProvider = "discord"
	GetSigninProviderProviderParamsProviderFacebook    GetSigninProviderProviderParamsProvider = "facebook"
	GetSigninProviderProviderParamsProviderGithub      GetSigninProviderProviderParamsProvider = "github"
	GetSigninProviderProviderParamsProviderGitlab      GetSigninProviderProviderParamsProvider = "gitlab"
	GetSigninProviderProviderParamsProviderGoogle      GetSigninProviderProviderParamsProvider = "google"
	GetSigninProviderProviderParamsProviderLinkedin    GetSigninProviderProviderParamsProvider = "linkedin"
	GetSigninProviderProviderParamsProviderSpotify     GetSigninProviderProviderParamsProvider = "spotify"
	GetSigninProviderProviderParamsProviderStrava      GetSigninProviderProviderParamsProvider = "strava"
	GetSigninProviderProviderParamsProviderTwitch      GetSigninProviderProviderParamsProvider = "twitch"
	GetSigninProviderProviderParamsProviderTwitter     GetSigninProviderProviderParamsProvider = "twitter"
	GetSigninProviderProviderParamsProviderWindowslive GetSigninProviderProviderParamsProvider = "windowslive"
	GetSigninProviderProviderParamsProviderWorkos      GetSigninProviderProviderParamsProvider = "workos"
)

// Defines values for GetSigninProviderProviderCallbackParamsProvider.
const (
	GetSigninProviderProviderCallbackParamsProviderApple       GetSigninProviderProviderCallbackParamsProvider = "apple"
	GetSigninProviderProviderCallbackParamsProviderAzuread     GetSigninProviderProviderCallbackParamsProvider = "azuread"
	GetSigninProviderProviderCallbackParamsProviderBitbucket   GetSigninProviderProviderCallbackParamsProvider = "bitbucket"
	GetSigninProviderProviderCallbackParamsProviderDiscord     GetSigninProviderProviderCallbackParamsProvider = "discord"
	GetSigninProviderProviderCallbackParamsProviderFacebook    GetSigninProviderProviderCallbackParamsProvider = "facebook"
	GetSigninProviderProviderCallbackParamsProviderGithub      GetSigninProviderProviderCallbackParamsProvider = "github"
	GetSigninProviderProviderCallbackParamsProviderGitlab      GetSigninProviderProviderCallbackParamsProvider = "gitlab"
	GetSigninProviderProviderCallbackParamsProviderGoogle      GetSigninProviderProviderCallbackParamsProvider = "google"
	GetSigninProviderProviderCallbackParamsProviderLinkedin    GetSigninProviderProviderCallbackParamsProvider = "linkedin"
	GetSigninProviderProviderCallbackParamsProviderSpotify     GetSigninProviderProviderCallbackParamsProvider = "spotify"
	GetSigninProviderProviderCallbackParamsProviderStrava      GetSigninProviderProviderCallbackParamsProvider = "strava"
	GetSigninProviderProviderCallbackParamsProviderTwitch      GetSigninProviderProviderCallbackParamsProvider = "twitch"
	GetSigninProviderProviderCallbackParamsProviderTwitter     GetSigninProviderProviderCallbackParamsProvider = "twitter"
	GetSigninProviderProviderCallbackParamsProviderWindowslive GetSigninProviderProviderCallbackParamsProvider = "windowslive"
	GetSigninProviderProviderCallbackParamsProviderWorkos      GetSigninProviderProviderCallbackParamsProvider = "workos"
)

// Defines values for PostSigninProviderProviderCallbackParamsProvider.
const (
	Apple       PostSigninProviderProviderCallbackParamsProvider = "apple"
	Azuread     PostSigninProviderProviderCallbackParamsProvider = "azuread"
	Bitbucket   PostSigninProviderProviderCallbackParamsProvider = "bitbucket"
	Discord     PostSigninProviderProviderCallbackParamsProvider = "discord"
	Facebook    PostSigninProviderProviderCallbackParamsProvider = "facebook"
	Github      PostSigninProviderProviderCallbackParamsProvider = "github"
	Gitlab      PostSigninProviderProviderCallbackParamsProvider = "gitlab"
	Google      PostSigninProviderProviderCallbackParamsProvider = "google"
	Linkedin    PostSigninProviderProviderCallbackParamsProvider = "linkedin"
	Spotify     PostSigninProviderProviderCallbackParamsProvider = "spotify"
	Strava      PostSigninProviderProviderCallbackParamsProvider = "strava"
	Twitch      PostSigninProviderProviderCallbackParamsProvider = "twitch"
	Twitter     PostSigninProviderProviderCallbackParamsProvider = "twitter"
	Windowslive PostSigninProviderProviderCallbackParamsProvider = "windowslive"
	Workos      PostSigninProviderProviderCallbackParamsProvider = "workos"
)

// Defines values for GetVerifyParamsType.
const (
	GetVerifyParamsTypeEmailConfirmChange GetVerifyParamsType = "emailConfirmChange"
	GetVerifyParamsTypeEmailVerify        GetVerifyParamsType = "emailVerify"
	GetVerifyParamsTypePasswordReset      GetVerifyParamsType = "passwordReset"
	GetVerifyParamsTypeSigninPasswordless GetVerifyParamsType = "signinPasswordless"
)

// AttestationFormat The attestation statement format
type AttestationFormat string

// AuthenticationExtensions Additional parameters requesting additional processing by the client and authenticator
type AuthenticationExtensions map[string]interface{}

// AuthenticationExtensionsClientOutputs Map of extension outputs from the client
type AuthenticationExtensionsClientOutputs struct {
	// Appid Application identifier extension output
	Appid *bool `json:"appid,omitempty"`

	// CredProps Credential properties extension output
	CredProps *CredentialPropertiesOutput `json:"credProps,omitempty"`

	// HmacCreateSecret HMAC secret extension output
	HmacCreateSecret     *bool                  `json:"hmacCreateSecret,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthenticatorAssertionResponse defines model for AuthenticatorAssertionResponse.
type AuthenticatorAssertionResponse struct {
	// AuthenticatorData Base64url encoded authenticator data
	AuthenticatorData string `json:"authenticatorData"`

	// ClientDataJSON Base64url encoded client data JSON
	ClientDataJSON string `json:"clientDataJSON"`

	// Signature Base64url encoded assertion signature
	Signature string `json:"signature"`

	// UserHandle Base64url encoded user handle
	UserHandle *string `json:"userHandle"`
}

// AuthenticatorAttachment The authenticator attachment modality
type AuthenticatorAttachment string

// AuthenticatorAttestationResponse defines model for AuthenticatorAttestationResponse.
type AuthenticatorAttestationResponse struct {
	// AttestationObject Base64url-encoded binary data
	AttestationObject URLEncodedBase64 `json:"attestationObject"`

	// AuthenticatorData Base64url-encoded binary data
	AuthenticatorData *URLEncodedBase64 `json:"authenticatorData,omitempty"`

	// ClientDataJSON Base64url-encoded binary data
	ClientDataJSON URLEncodedBase64 `json:"clientDataJSON"`

	// PublicKey Base64url-encoded binary data
	PublicKey *URLEncodedBase64 `json:"publicKey,omitempty"`

	// PublicKeyAlgorithm The public key algorithm identifier
	PublicKeyAlgorithm *int64 `json:"publicKeyAlgorithm,omitempty"`

	// Transports The authenticator transports
	Transports *[]string `json:"transports,omitempty"`
}

// AuthenticatorSelection defines model for AuthenticatorSelection.
type AuthenticatorSelection struct {
	// AuthenticatorAttachment The authenticator attachment modality
	AuthenticatorAttachment *AuthenticatorAttachment `json:"authenticatorAttachment,omitempty"`

	// RequireResidentKey Whether the authenticator must create a client-side-resident public key credential source
	RequireResidentKey *bool `json:"requireResidentKey,omitempty"`

	// ResidentKey The resident key requirement
	ResidentKey *ResidentKeyRequirement `json:"residentKey,omitempty"`

	// UserVerification A requirement for user verification for the operation
	UserVerification *UserVerificationRequirement `json:"userVerification,omitempty"`
}

// AuthenticatorTransport The authenticator transports that can be used
type AuthenticatorTransport string

// ConveyancePreference The attestation conveyance preference
type ConveyancePreference string

// CreatePATRequest defines model for CreatePATRequest.
type CreatePATRequest struct {
	// ExpiresAt Expiration date of the PAT
	ExpiresAt time.Time               `json:"expiresAt"`
	Metadata  *map[string]interface{} `json:"metadata,omitempty"`
}

// CreatePATResponse defines model for CreatePATResponse.
type CreatePATResponse struct {
	// Id ID of the PAT
	Id string `json:"id"`

	// PersonalAccessToken PAT
	PersonalAccessToken string `json:"personalAccessToken"`
}

// CredentialAssertionResponse defines model for CredentialAssertionResponse.
type CredentialAssertionResponse = protocol.CredentialAssertionResponse

// CredentialCreationResponse defines model for CredentialCreationResponse.
type CredentialCreationResponse = protocol.CredentialCreationResponse

// CredentialParameter defines model for CredentialParameter.
type CredentialParameter struct {
	// Alg The cryptographic algorithm identifier
	Alg int `json:"alg"`

	// Type The valid credential types
	Type CredentialType `json:"type"`
}

// CredentialPropertiesOutput Credential properties extension output
type CredentialPropertiesOutput struct {
	// Rk Indicates if the credential is a resident key
	Rk *bool `json:"rk,omitempty"`
}

// CredentialType The valid credential types
type CredentialType string

// ErrorResponse Standardized error response
type ErrorResponse struct {
	// Error Error code identifying the specific application error
	Error ErrorResponseError `json:"error"`

	// Message Human-friendly error message
	Message string `json:"message"`

	// Status HTTP status error code
	Status int `json:"status"`
}

// ErrorResponseError Error code identifying the specific application error
type ErrorResponseError string

// IdTokenProvider defines model for IdTokenProvider.
type IdTokenProvider string

// JWK JSON Web Key for JWT verification
type JWK struct {
	// Alg Algorithm used with this key
	Alg string `json:"alg"`

	// E RSA public exponent
	E string `json:"e"`

	// Kid Key ID
	Kid string `json:"kid"`

	// Kty Key type
	Kty string `json:"kty"`

	// N RSA modulus
	N string `json:"n"`

	// Use Key usage
	Use string `json:"use"`
}

// JWKSet JSON Web Key Set for verifying JWT signatures
type JWKSet struct {
	// Keys Array of public keys
	Keys []JWK `json:"keys"`
}

// LinkIdTokenRequest defines model for LinkIdTokenRequest.
type LinkIdTokenRequest struct {
	// IdToken Apple ID token
	IdToken string `json:"idToken"`

	// Nonce Nonce used during sign in process
	Nonce    *string         `json:"nonce,omitempty"`
	Provider IdTokenProvider `json:"provider"`
}

// MFAChallengePayload Challenge payload for multi-factor authentication
type MFAChallengePayload struct {
	// Ticket Ticket to use when completing the MFA challenge
	Ticket string `json:"ticket"`
}

// OKResponse defines model for OKResponse.
type OKResponse string

// OptionsRedirectTo defines model for OptionsRedirectTo.
type OptionsRedirectTo struct {
	RedirectTo *string `json:"redirectTo,omitempty"`
}

// PublicKeyCredentialCreationOptions defines model for PublicKeyCredentialCreationOptions.
type PublicKeyCredentialCreationOptions = protocol.PublicKeyCredentialCreationOptions

// PublicKeyCredentialDescriptor defines model for PublicKeyCredentialDescriptor.
type PublicKeyCredentialDescriptor struct {
	// Id Base64url-encoded binary data
	Id URLEncodedBase64 `json:"id"`

	// Transports The authenticator transports that can be used
	Transports *[]AuthenticatorTransport `json:"transports,omitempty"`

	// Type The valid credential types
	Type CredentialType `json:"type"`
}

// PublicKeyCredentialHints Hints to help guide the user through the experience
type PublicKeyCredentialHints string

// PublicKeyCredentialRequestOptions defines model for PublicKeyCredentialRequestOptions.
type PublicKeyCredentialRequestOptions = protocol.PublicKeyCredentialRequestOptions

// RefreshTokenRequest Request to refresh an access token
type RefreshTokenRequest struct {
	// RefreshToken Refresh token used to generate a new access token
	RefreshToken string `json:"refreshToken"`
}

// RelyingPartyEntity defines model for RelyingPartyEntity.
type RelyingPartyEntity struct {
	// Id A unique identifier for the Relying Party entity, which sets the RP ID
	Id string `json:"id"`

	// Name A human-palatable name for the entity
	Name string `json:"name"`
}

// ResidentKeyRequirement The resident key requirement
type ResidentKeyRequirement string

// Session User authentication session containing tokens and user information
type Session struct {
	// AccessToken JWT token for authenticating API requests
	AccessToken string `json:"accessToken"`

	// AccessTokenExpiresIn Expiration time of the access token in seconds
	AccessTokenExpiresIn int64 `json:"accessTokenExpiresIn"`

	// RefreshToken Token used to refresh the access token
	RefreshToken string `json:"refreshToken"`

	// RefreshTokenId Identifier for the refresh token
	RefreshTokenId string `json:"refreshTokenId"`

	// User User profile and account information
	User *User `json:"user,omitempty"`
}

// SessionPayload Container for session information
type SessionPayload struct {
	// Session User authentication session containing tokens and user information
	Session *Session `json:"session,omitempty"`
}

// SignInAnonymousRequest defines model for SignInAnonymousRequest.
type SignInAnonymousRequest struct {
	DisplayName *string `json:"displayName,omitempty"`

	// Locale A two-characters locale
	Locale   *string                 `json:"locale,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// SignInEmailPasswordRequest Request to authenticate using email and password
type SignInEmailPasswordRequest struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// SignInEmailPasswordResponse Response for email-password authentication that may include a session or MFA challenge
type SignInEmailPasswordResponse struct {
	// Mfa Challenge payload for multi-factor authentication
	Mfa *MFAChallengePayload `json:"mfa,omitempty"`

	// Session User authentication session containing tokens and user information
	Session *Session `json:"session,omitempty"`
}

// SignInIdTokenRequest defines model for SignInIdTokenRequest.
type SignInIdTokenRequest struct {
	// IdToken Apple ID token
	IdToken string `json:"idToken"`

	// Nonce Nonce used during sign in process
	Nonce    *string         `json:"nonce,omitempty"`
	Options  *SignUpOptions  `json:"options,omitempty"`
	Provider IdTokenProvider `json:"provider"`
}

// SignInMfaTotpRequest defines model for SignInMfaTotpRequest.
type SignInMfaTotpRequest struct {
	// Otp One time password
	Otp string `json:"otp"`

	// Ticket Ticket
	Ticket string `json:"ticket"`
}

// SignInOTPEmailRequest defines model for SignInOTPEmailRequest.
type SignInOTPEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignInOTPEmailVerifyRequest defines model for SignInOTPEmailVerifyRequest.
type SignInOTPEmailVerifyRequest struct {
	// Email A valid email
	Email openapi_types.Email `json:"email"`

	// Otp One time password
	Otp string `json:"otp"`
}

// SignInOTPEmailVerifyResponse defines model for SignInOTPEmailVerifyResponse.
type SignInOTPEmailVerifyResponse struct {
	// Session User authentication session containing tokens and user information
	Session *Session `json:"session,omitempty"`
}

// SignInPATRequest defines model for SignInPATRequest.
type SignInPATRequest struct {
	// PersonalAccessToken PAT
	PersonalAccessToken string `json:"personalAccessToken"`
}

// SignInPasswordlessEmailRequest defines model for SignInPasswordlessEmailRequest.
type SignInPasswordlessEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignInPasswordlessSmsOtpRequest defines model for SignInPasswordlessSmsOtpRequest.
type SignInPasswordlessSmsOtpRequest struct {
	// Otp One-time password received by SMS
	Otp string `json:"otp"`

	// PhoneNumber Phone number of the user
	PhoneNumber string `json:"phoneNumber"`
}

// SignInPasswordlessSmsOtpResponse defines model for SignInPasswordlessSmsOtpResponse.
type SignInPasswordlessSmsOtpResponse struct {
	// Mfa Challenge payload for multi-factor authentication
	Mfa *MFAChallengePayload `json:"mfa,omitempty"`

	// Session User authentication session containing tokens and user information
	Session *Session `json:"session,omitempty"`
}

// SignInPasswordlessSmsRequest defines model for SignInPasswordlessSmsRequest.
type SignInPasswordlessSmsRequest struct {
	Options *SignUpOptions `json:"options,omitempty"`

	// PhoneNumber Phone number of the user
	PhoneNumber string `json:"phoneNumber"`
}

// SignInWebauthnRequest defines model for SignInWebauthnRequest.
type SignInWebauthnRequest struct {
	// Email A valid email
	Email *openapi_types.Email `json:"email,omitempty"`
}

// SignInWebauthnVerifyRequest defines model for SignInWebauthnVerifyRequest.
type SignInWebauthnVerifyRequest struct {
	Credential CredentialAssertionResponse `json:"credential"`

	// Email A valid email. Deprecated, no longer used
	// Deprecated:
	Email *openapi_types.Email `json:"email,omitempty"`
}

// SignOutRequest defines model for SignOutRequest.
type SignOutRequest struct {
	// All Sign out from all connected devices
	All *bool `json:"all,omitempty"`

	// RefreshToken Refresh token for the current session
	RefreshToken *string `json:"refreshToken,omitempty"`
}

// SignUpEmailPasswordRequest Request to register a new user with email and password
type SignUpEmailPasswordRequest struct {
	// Email Email address for the new user account
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`

	// Password Password for the new user account
	Password string `json:"password"`
}

// SignUpOptions defines model for SignUpOptions.
type SignUpOptions struct {
	AllowedRoles *[]string `json:"allowedRoles,omitempty"`
	DefaultRole  *string   `json:"defaultRole,omitempty"`
	DisplayName  *string   `json:"displayName,omitempty"`

	// Locale A two-characters locale
	Locale     *string                 `json:"locale,omitempty"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	RedirectTo *string                 `json:"redirectTo,omitempty"`
}

// SignUpWebauthnRequest defines model for SignUpWebauthnRequest.
type SignUpWebauthnRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignUpWebauthnVerifyRequest defines model for SignUpWebauthnVerifyRequest.
type SignUpWebauthnVerifyRequest struct {
	Credential CredentialCreationResponse `json:"credential"`

	// Nickname Nickname for the security key
	Nickname *string        `json:"nickname,omitempty"`
	Options  *SignUpOptions `json:"options,omitempty"`
}

// TotpGenerateResponse Response containing TOTP setup information for MFA
type TotpGenerateResponse struct {
	// ImageUrl URL to QR code image for scanning with an authenticator app
	ImageUrl string `json:"imageUrl"`

	// TotpSecret TOTP secret key for manual setup with an authenticator app
	TotpSecret string `json:"totpSecret"`
}

// URLEncodedBase64 Base64url-encoded binary data
type URLEncodedBase64 = []byte

// User User profile and account information
type User struct {
	// ActiveMfaType Active MFA type for the user
	ActiveMfaType *string `json:"activeMfaType"`

	// AvatarUrl URL to the user's profile picture
	AvatarUrl string `json:"avatarUrl"`

	// CreatedAt Timestamp when the user account was created
	CreatedAt time.Time `json:"createdAt"`

	// DefaultRole Default authorization role for the user
	DefaultRole string `json:"defaultRole"`

	// DisplayName User's display name
	DisplayName string `json:"displayName"`

	// Email User's email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified"`

	// Id Unique identifier for the user
	Id string `json:"id"`

	// IsAnonymous Whether this is an anonymous user account
	IsAnonymous bool `json:"isAnonymous"`

	// Locale User's preferred locale (language code)
	Locale string `json:"locale"`

	// Metadata Custom metadata associated with the user
	Metadata map[string]interface{} `json:"metadata"`

	// PhoneNumber User's phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// PhoneNumberVerified Whether the user's phone number has been verified
	PhoneNumberVerified bool `json:"phoneNumberVerified"`

	// Roles List of roles assigned to the user
	Roles []string `json:"roles"`
}

// UserDeanonymizeRequest defines model for UserDeanonymizeRequest.
type UserDeanonymizeRequest struct {
	// Connection Deprecated, will be ignored
	// Deprecated:
	Connection *string `json:"connection,omitempty"`

	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`

	// Password A password of minimum 3 characters
	Password *string `json:"password,omitempty"`

	// SignInMethod Which sign-in method to use
	SignInMethod UserDeanonymizeRequestSignInMethod `json:"signInMethod"`
}

// UserDeanonymizeRequestSignInMethod Which sign-in method to use
type UserDeanonymizeRequestSignInMethod string

// UserEmailChangeRequest defines model for UserEmailChangeRequest.
type UserEmailChangeRequest struct {
	// NewEmail A valid email
	NewEmail openapi_types.Email `json:"newEmail"`
	Options  *OptionsRedirectTo  `json:"options,omitempty"`
}

// UserEmailSendVerificationEmailRequest defines model for UserEmailSendVerificationEmailRequest.
type UserEmailSendVerificationEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *OptionsRedirectTo  `json:"options,omitempty"`
}

// UserEntity defines model for UserEntity.
type UserEntity struct {
	// DisplayName A human-palatable name for the user account, intended only for display
	DisplayName string `json:"displayName"`

	// Id The user handle of the user account entity
	Id string `json:"id"`

	// Name A human-palatable name for the entity
	Name string `json:"name"`
}

// UserMfaRequest Request to activate or deactivate multi-factor authentication
type UserMfaRequest struct {
	// ActiveMfaType Type of MFA to activate. Use empty string to disable MFA.
	ActiveMfaType *UserMfaRequestActiveMfaType `json:"activeMfaType,omitempty"`

	// Code Verification code from the authenticator app when activating MFA
	Code string `json:"code"`
}

// UserMfaRequestActiveMfaType Type of MFA to activate. Use empty string to disable MFA.
type UserMfaRequestActiveMfaType string

// UserPasswordRequest defines model for UserPasswordRequest.
type UserPasswordRequest struct {
	// NewPassword A password of minimum 3 characters
	NewPassword string `json:"newPassword"`

	// Ticket Ticket to reset the password, required if the user is not authenticated
	Ticket *string `json:"ticket,omitempty"`
}

// UserPasswordResetRequest defines model for UserPasswordResetRequest.
type UserPasswordResetRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *OptionsRedirectTo  `json:"options,omitempty"`
}

// UserVerificationRequirement A requirement for user verification for the operation
type UserVerificationRequirement string

// VerifyAddSecurityKeyRequest defines model for VerifyAddSecurityKeyRequest.
type VerifyAddSecurityKeyRequest struct {
	Credential CredentialCreationResponse `json:"credential"`

	// Nickname Optional nickname for the security key
	Nickname *string `json:"nickname,omitempty"`
}

// VerifyAddSecurityKeyResponse defines model for VerifyAddSecurityKeyResponse.
type VerifyAddSecurityKeyResponse struct {
	// Id The ID of the newly added security key
	Id string `json:"id"`

	// Nickname The nickname of the security key if provided
	Nickname *string `json:"nickname,omitempty"`
}

// VerifyTokenRequest defines model for VerifyTokenRequest.
type VerifyTokenRequest struct {
	// Token JWT token to verify
	Token *string `json:"token,omitempty"`
}

// RedirectToQuery Target URL for the redirect
type RedirectToQuery = string

// SignInProvider defines model for SignInProvider.
type SignInProvider string

// TicketQuery Ticket
type TicketQuery = string

// TicketTypeQuery Type of the ticket
type TicketTypeQuery string

// GetSigninProviderProviderParams defines parameters for GetSigninProviderProvider.
type GetSigninProviderProviderParams struct {
	// AllowedRoles Array of allowed roles for the user
	AllowedRoles *[]string `form:"allowedRoles,omitempty" json:"allowedRoles,omitempty"`

	// DefaultRole Default role for the user
	DefaultRole *string `form:"defaultRole,omitempty" json:"defaultRole,omitempty"`

	// DisplayName Display name for the user
	DisplayName *string `form:"displayName,omitempty" json:"displayName,omitempty"`

	// Locale A two-characters locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty"`

	// Metadata Additional metadata for the user
	Metadata *map[string]interface{} `form:"metadata,omitempty" json:"metadata,omitempty"`

	// RedirectTo URI to redirect to
	RedirectTo *string `form:"redirectTo,omitempty" json:"redirectTo,omitempty"`

	// Connect If set, this means that the user is already authenticated and wants to link their account. This needs to be a valid JWT access token.
	Connect *string `form:"connect,omitempty" json:"connect,omitempty"`
}

// GetSigninProviderProviderParamsProvider defines parameters for GetSigninProviderProvider.
type GetSigninProviderProviderParamsProvider string

// GetSigninProviderProviderCallbackParams defines parameters for GetSigninProviderProviderCallback.
type GetSigninProviderProviderCallbackParams struct {
	// Code Authorization code provided by the authentication provider
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// IdToken ID token provided by the authentication provider
	IdToken *string `form:"id_token,omitempty" json:"id_token,omitempty"`

	// State State parameter to avoid CSRF attacks
	State string `form:"state" json:"state"`

	// OauthToken OAuth token for the provider (e.g., X)
	OauthToken *string `form:"oauth_token,omitempty" json:"oauth_token,omitempty"`

	// OauthVerifier OAuth verifier for the provider (e.g., X)
	OauthVerifier *string `form:"oauth_verifier,omitempty" json:"oauth_verifier,omitempty"`

	// Error Error message if authentication failed
	Error *string `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription Detailed error description if authentication failed
	ErrorDescription *string `form:"error_description,omitempty" json:"error_description,omitempty"`

	// ErrorUri URI with more information about the error
	ErrorUri *string `form:"error_uri,omitempty" json:"error_uri,omitempty"`
}

// GetSigninProviderProviderCallbackParamsProvider defines parameters for GetSigninProviderProviderCallback.
type GetSigninProviderProviderCallbackParamsProvider string

// PostSigninProviderProviderCallbackFormdataBody defines parameters for PostSigninProviderProviderCallback.
type PostSigninProviderProviderCallbackFormdataBody struct {
	// Code Authorization code provided by the authentication provider
	Code *string `form:"code" json:"code"`

	// Error Error message if authentication failed
	Error *string `form:"error" json:"error"`

	// ErrorDescription Detailed error description if authentication failed
	ErrorDescription *string `form:"error_description" json:"error_description"`

	// ErrorUri URI with more information about the error
	ErrorUri *string `form:"error_uri" json:"error_uri"`

	// IdToken ID token provided by the authentication provider
	IdToken *string `form:"id_token" json:"id_token"`

	// State State parameter to avoid CSRF attacks
	State string `form:"state" json:"state"`

	// User JSON string containing user information (only provided on first authentication with Apple)
	User                 *string                `form:"user" json:"user"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostSigninProviderProviderCallbackParamsProvider defines parameters for PostSigninProviderProviderCallback.
type PostSigninProviderProviderCallbackParamsProvider string

// GetVerifyParams defines parameters for GetVerify.
type GetVerifyParams struct {
	// Ticket Ticket
	Ticket TicketQuery `form:"ticket" json:"ticket"`

	// Type Type of the ticket. Deprecated, no longer used
	Type *GetVerifyParamsType `form:"type,omitempty" json:"type,omitempty"`

	// RedirectTo Target URL for the redirect
	RedirectTo RedirectToQuery `form:"redirectTo" json:"redirectTo"`
}

// GetVerifyParamsType defines parameters for GetVerify.
type GetVerifyParamsType string

// PostElevateWebauthnVerifyJSONRequestBody defines body for PostElevateWebauthnVerify for application/json ContentType.
type PostElevateWebauthnVerifyJSONRequestBody = SignInWebauthnVerifyRequest

// PostLinkIdtokenJSONRequestBody defines body for PostLinkIdtoken for application/json ContentType.
type PostLinkIdtokenJSONRequestBody = LinkIdTokenRequest

// PostPatJSONRequestBody defines body for PostPat for application/json ContentType.
type PostPatJSONRequestBody = CreatePATRequest

// PostSigninAnonymousJSONRequestBody defines body for PostSigninAnonymous for application/json ContentType.
type PostSigninAnonymousJSONRequestBody = SignInAnonymousRequest

// PostSigninEmailPasswordJSONRequestBody defines body for PostSigninEmailPassword for application/json ContentType.
type PostSigninEmailPasswordJSONRequestBody = SignInEmailPasswordRequest

// PostSigninIdtokenJSONRequestBody defines body for PostSigninIdtoken for application/json ContentType.
type PostSigninIdtokenJSONRequestBody = SignInIdTokenRequest

// PostSigninMfaTotpJSONRequestBody defines body for PostSigninMfaTotp for application/json ContentType.
type PostSigninMfaTotpJSONRequestBody = SignInMfaTotpRequest

// PostSigninOtpEmailJSONRequestBody defines body for PostSigninOtpEmail for application/json ContentType.
type PostSigninOtpEmailJSONRequestBody = SignInOTPEmailRequest

// PostSigninOtpEmailVerifyJSONRequestBody defines body for PostSigninOtpEmailVerify for application/json ContentType.
type PostSigninOtpEmailVerifyJSONRequestBody = SignInOTPEmailVerifyRequest

// PostSigninPasswordlessEmailJSONRequestBody defines body for PostSigninPasswordlessEmail for application/json ContentType.
type PostSigninPasswordlessEmailJSONRequestBody = SignInPasswordlessEmailRequest

// PostSigninPasswordlessSmsJSONRequestBody defines body for PostSigninPasswordlessSms for application/json ContentType.
type PostSigninPasswordlessSmsJSONRequestBody = SignInPasswordlessSmsRequest

// PostSigninPasswordlessSmsOtpJSONRequestBody defines body for PostSigninPasswordlessSmsOtp for application/json ContentType.
type PostSigninPasswordlessSmsOtpJSONRequestBody = SignInPasswordlessSmsOtpRequest

// PostSigninPatJSONRequestBody defines body for PostSigninPat for application/json ContentType.
type PostSigninPatJSONRequestBody = SignInPATRequest

// PostSigninProviderProviderCallbackFormdataRequestBody defines body for PostSigninProviderProviderCallback for application/x-www-form-urlencoded ContentType.
type PostSigninProviderProviderCallbackFormdataRequestBody PostSigninProviderProviderCallbackFormdataBody

// PostSigninWebauthnJSONRequestBody defines body for PostSigninWebauthn for application/json ContentType.
type PostSigninWebauthnJSONRequestBody = SignInWebauthnRequest

// PostSigninWebauthnVerifyJSONRequestBody defines body for PostSigninWebauthnVerify for application/json ContentType.
type PostSigninWebauthnVerifyJSONRequestBody = SignInWebauthnVerifyRequest

// PostSignoutJSONRequestBody defines body for PostSignout for application/json ContentType.
type PostSignoutJSONRequestBody = SignOutRequest

// PostSignupEmailPasswordJSONRequestBody defines body for PostSignupEmailPassword for application/json ContentType.
type PostSignupEmailPasswordJSONRequestBody = SignUpEmailPasswordRequest

// PostSignupWebauthnJSONRequestBody defines body for PostSignupWebauthn for application/json ContentType.
type PostSignupWebauthnJSONRequestBody = SignUpWebauthnRequest

// PostSignupWebauthnVerifyJSONRequestBody defines body for PostSignupWebauthnVerify for application/json ContentType.
type PostSignupWebauthnVerifyJSONRequestBody = SignUpWebauthnVerifyRequest

// PostTokenJSONRequestBody defines body for PostToken for application/json ContentType.
type PostTokenJSONRequestBody = RefreshTokenRequest

// PostTokenVerifyJSONRequestBody defines body for PostTokenVerify for application/json ContentType.
type PostTokenVerifyJSONRequestBody = VerifyTokenRequest

// PostUserDeanonymizeJSONRequestBody defines body for PostUserDeanonymize for application/json ContentType.
type PostUserDeanonymizeJSONRequestBody = UserDeanonymizeRequest

// PostUserEmailChangeJSONRequestBody defines body for PostUserEmailChange for application/json ContentType.
type PostUserEmailChangeJSONRequestBody = UserEmailChangeRequest

// PostUserEmailSendVerificationEmailJSONRequestBody defines body for PostUserEmailSendVerificationEmail for application/json ContentType.
type PostUserEmailSendVerificationEmailJSONRequestBody = UserEmailSendVerificationEmailRequest

// PostUserMfaJSONRequestBody defines body for PostUserMfa for application/json ContentType.
type PostUserMfaJSONRequestBody = UserMfaRequest

// PostUserPasswordJSONRequestBody defines body for PostUserPassword for application/json ContentType.
type PostUserPasswordJSONRequestBody = UserPasswordRequest

// PostUserPasswordResetJSONRequestBody defines body for PostUserPasswordReset for application/json ContentType.
type PostUserPasswordResetJSONRequestBody = UserPasswordResetRequest

// PostUserWebauthnVerifyJSONRequestBody defines body for PostUserWebauthnVerify for application/json ContentType.
type PostUserWebauthnVerifyJSONRequestBody = VerifyAddSecurityKeyRequest

// Getter for additional properties for PostSigninProviderProviderCallbackFormdataBody. Returns the specified
// element and whether it was found
func (a PostSigninProviderProviderCallbackFormdataBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostSigninProviderProviderCallbackFormdataBody
func (a *PostSigninProviderProviderCallbackFormdataBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostSigninProviderProviderCallbackFormdataBody to handle AdditionalProperties
func (a *PostSigninProviderProviderCallbackFormdataBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["error_description"]; found {
		err = json.Unmarshal(raw, &a.ErrorDescription)
		if err != nil {
			return fmt.Errorf("error reading 'error_description': %w", err)
		}
		delete(object, "error_description")
	}

	if raw, found := object["error_uri"]; found {
		err = json.Unmarshal(raw, &a.ErrorUri)
		if err != nil {
			return fmt.Errorf("error reading 'error_uri': %w", err)
		}
		delete(object, "error_uri")
	}

	if raw, found := object["id_token"]; found {
		err = json.Unmarshal(raw, &a.IdToken)
		if err != nil {
			return fmt.Errorf("error reading 'id_token': %w", err)
		}
		delete(object, "id_token")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostSigninProviderProviderCallbackFormdataBody to handle AdditionalProperties
func (a PostSigninProviderProviderCallbackFormdataBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Code != nil {
		object["code"], err = json.Marshal(a.Code)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'code': %w", err)
		}
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	if a.ErrorDescription != nil {
		object["error_description"], err = json.Marshal(a.ErrorDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_description': %w", err)
		}
	}

	if a.ErrorUri != nil {
		object["error_uri"], err = json.Marshal(a.ErrorUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_uri': %w", err)
		}
	}

	if a.IdToken != nil {
		object["id_token"], err = json.Marshal(a.IdToken)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id_token': %w", err)
		}
	}

	object["state"], err = json.Marshal(a.State)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'state': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationExtensionsClientOutputs. Returns the specified
// element and whether it was found
func (a AuthenticationExtensionsClientOutputs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationExtensionsClientOutputs
func (a *AuthenticationExtensionsClientOutputs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationExtensionsClientOutputs to handle AdditionalProperties
func (a *AuthenticationExtensionsClientOutputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appid"]; found {
		err = json.Unmarshal(raw, &a.Appid)
		if err != nil {
			return fmt.Errorf("error reading 'appid': %w", err)
		}
		delete(object, "appid")
	}

	if raw, found := object["credProps"]; found {
		err = json.Unmarshal(raw, &a.CredProps)
		if err != nil {
			return fmt.Errorf("error reading 'credProps': %w", err)
		}
		delete(object, "credProps")
	}

	if raw, found := object["hmacCreateSecret"]; found {
		err = json.Unmarshal(raw, &a.HmacCreateSecret)
		if err != nil {
			return fmt.Errorf("error reading 'hmacCreateSecret': %w", err)
		}
		delete(object, "hmacCreateSecret")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationExtensionsClientOutputs to handle AdditionalProperties
func (a AuthenticationExtensionsClientOutputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Appid != nil {
		object["appid"], err = json.Marshal(a.Appid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appid': %w", err)
		}
	}

	if a.CredProps != nil {
		object["credProps"], err = json.Marshal(a.CredProps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credProps': %w", err)
		}
	}

	if a.HmacCreateSecret != nil {
		object["hmacCreateSecret"], err = json.Marshal(a.HmacCreateSecret)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hmacCreateSecret': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
