openapi: '3.0.0'
info:
  version: 1.0.0
  title: Nhost Auth
  description: Service to Authenticate
  termsOfService: http://swagger.io/terms/
  contact:
    name: Nhost's Support
    email: support@nhost.io
    url: https://nhost.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /healthz:
    head:
      summary: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy

    get:
      summary: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /.well-known/jwks.json:
    get:
      summary: Get public keys for JWT verification in JWK Set format
      tags:
        - keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
          description: >-
            The public keys in JWK Set format

  /pat:
    post:
      summary: Create a Personal Access Token (PAT)
      tags:
        - pat
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePATRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePATResponse'
          description: >-
            Successfully created a Personal Access Token

  /token:
    post:
      summary: Refresh the JWT access token
      tags:
        - token
        - access-token
        - jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: >-
            Successfully refreshed the JWT access token

  /signout:
    post:
      summary: Sign out
      tags:
        - signout
      security:
        - BearerAuth: []
        - {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignOutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
          description: >-
            Successfully signed out

  /signin/anonymous:
    post:
      summary: Sign in anonymously
      tags:
        - signin
        - anonymous
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninAnonymousRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Successfully signed in

  /signin/email-password:
    post:
      summary: Sign in with email and password
      tags:
        - signin
        - email-and-password

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInEmailPasswordResponse'
          description: >-
            Successfully signed in. Null session means TOTP challenge is needed

  /signin/mfa/totp:
    post:
      summary: Verify TOTP and return a session if validation is successful
      tags:
        - signin
        - mfa
        - totp
        - email-and-password

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInMfaTotpRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Successfully signed in

  /signin/passwordless/email:
    post:
      summary: >-
        Sign in with magic link sent to user's email. If the user doesn't exist, it will be created.
        The options object is optional and can be used to configure the user's when signing up a
        new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPasswordlessEmailRequest'
        required: true
      responses:
        '200':
          description: >-
            Email link sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/provider/{provider}:
    get:
      summary: Sign in with an oauth2 provider
      tags:
        - signin
        - signup
        - link
        - social
        - github
        - google
      parameters:
        - $ref: '#/components/parameters/SigninProvider'
        - name: allowedRoles
          in: query
          required: false
          description: Array of allowed roles for the user
          schema:
            type: array
            items:
              type: string
            example:
              - me
              - user
        - name: defaultRole
          in: query
          required: false
          description: Default role for the user
          schema:
            type: string
            example: user
        - name: displayName
          in: query
          required: false
          description: Display name for the user
          schema:
            type: string
            pattern: ^[\p{L}\p{N}\p{S} ,.'-]+$
            maxLength: 32
            example: John Smith
        - name: locale
          in: query
          required: false
          description: A two-characters locale
          schema:
            type: string
            maxLength: 2
            minLength: 2
            example: en
        - name: metadata
          in: query
          required: false
          description: Additional metadata for the user
          schema:
            type: object
            additionalProperties: true
            example:
              firstName: John
              lastName: Smith
        - name: redirectTo
          in: query
          required: false
          description: URI to redirect to
          schema:
            type: string
            format: uri
            example: https://my-app.com/catch-redirection
        - name: connect
          in: query
          required: false
          description: >-
            If set, this means that the user is already authenticated and wants to link their account. This needs to be a valid JWT access token.
          schema:
            type: string

      responses:
        '302':
          description: Redirect to GitHub
          headers:
            Location:
              $ref: '#/components/headers/RedirectLocation'
          content: {}

  /signin/provider/{provider}/callback:
    get:
      summary: Callback for oauth2 provider
      tags:
        - signin
        - signup
        - social
      parameters:
        - $ref: '#/components/parameters/SigninProvider'
        - name: code
          in: query
          description: Authorization code provided by the authentication provider
          schema:
            type: string
        - name: id_token
          in: query
          description: ID token provided by the authentication provider
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: State parameter to avoid CSRF attacks
          schema:
            type: string
        - name: oauth_token
          in: query
          required: false
          description: OAuth token for the provider (e.g., X)
          schema:
            type: string
        - name: oauth_verifier
          in: query
          required: false
          description: OAuth verifier for the provider (e.g., X)
          schema:
            type: string
        - name: error
          in: query
          required: false
          description: Error message if authentication failed
          schema:
            type: string
        - name: error_description
          in: query
          required: false
          description: Detailed error description if authentication failed
          schema:
            type: string
        - name: error_uri
          in: query
          required: false
          description: URI with more information about the error
          schema:
            type: string
      responses:
        '302':
          description: Redirect to client application after successful authentication
          headers:
            Location:
              $ref: '#/components/headers/RedirectLocation'
          content: {}

    post:
      summary: Callback for oauth2 provider using form_post response mode
      tags:
        - signin
        - signup
        - social
      parameters:
        - $ref: '#/components/parameters/SigninProvider'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                  nullable: true
                  description: Authorization code provided by the authentication provider
                id_token:
                  type: string
                  nullable: true
                  description: ID token provided by the authentication provider
                state:
                  type: string
                  description: State parameter to avoid CSRF attacks
                user:
                  type: string
                  nullable: true
                  description: JSON string containing user information (only provided on first authentication with Apple)
                error:
                  type: string
                  nullable: true
                  description: Error message if authentication failed
                error_description:
                  type: string
                  nullable: true
                  description: Detailed error description if authentication failed
                error_uri:
                  type: string
                  nullable: true
                  description: URI with more information about the error
              required:
                - state
              additionalProperties: true
      responses:
        '302':
          description: Redirect to client application after successful authentication
          headers:
            Location:
              $ref: '#/components/headers/RedirectLocation'
          content: {}

  /signin/otp/email:
    post:
      summary: >-
        Sign in with a one time password sent to user's email. If the user doesn't exist, it will
        be created. The options object is optional and can be used to configure the user's when
        signing up a new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInOTPEmailRequest'
        required: true
      responses:
        '200':
          description: >-
            OTP sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/otp/email/verify:
    post:
      summary: >-
        Verify OTP and return a session if validation is successful
      tags:
        - signin
        - signup
        - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInOTPEmailVerifyRequest'
        required: true
      responses:
        '200':
          description: >-
            Magic link sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInOTPEmailVerifyResponse'

  /signin/passwordless/sms:
    post:
      summary: >-
        Sign in with a one time password sent to user's phone number. If the user doesn't exist, it will be created.
        The options object is optional and can be used to configure the user's when signing up a
        new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - passwordless
        - sms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPasswordlessSmsRequest'
        required: true
      responses:
        '200':
          description: >-
            OTP sent to user's phone number successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/passwordless/sms/otp:
    post:
      summary: >-
        Verify SMS OTP and return a session if validation is successful
      tags:
        - signin
        - signup
        - passwordless
        - sms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPasswordlessSmsOtpRequest'
        required: true
      responses:
        '200':
          description: User successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInPasswordlessSmsOtpResponse'

  /signin/pat:
    post:
      summary: >-
        Sign in with Personal Access Token (PAT)
      tags:
        - signin
        - pat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPATRequest'
        required: true
      responses:
        '200':
          description: >-
            Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'

  /signin/idtoken:
    post:
      summary: Sign in with in an id token
      tags:
        - signin
        - idtoken
        - apple
        - google
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInIdTokenRequest'
        required: true
      responses:
        '200':
          description: >-
            Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'

  /signup/email-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Successfully registered. Null session means email verification is
            pending
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Signup mechanism is disabled
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            User with given email already exists

      summary: Signup with email and password
      tags:
        - signup
        - email-and-password

  /signin/webauthn:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInWebauthnRequest'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInWebauthnResponse'
          description: >-
            Challenge sent

      summary: Signin with webauthn
      tags:
        - signin
        - webauthn

  /signin/webauthn/verify:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInWebauthnVerifyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Sign in successful

      summary: Verify webauthn signin
      tags:
        - signin
        - webauthn
        - verify

  /signup/webauthn:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpWebauthnRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpWebauthnResponse'
          description: >-
            Challenge sent

      summary: Signup with webauthn
      tags:
        - signup
        - webauthn

  /signup/webauthn/verify:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpWebauthnVerifyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Sign up successful

      summary: Verify webauthn signup
      tags:
        - signup
        - webauthn
        - verify

  /link/idtoken:
    post:
      summary: Link a user account with the provider's account using an id token
      tags:
        - link
        - idtoken
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkIdTokenRequest'
        required: true
      responses:
        '200':
          description: >-
            Identity linked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/deanonymize:
    post:
      summary: >-
        Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
      tags:
        - anonymous
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeanonymizeRequest'
        required: true
      responses:
        '200':
          description: >-
            User deanonymized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/email/change:
    post:
      summary: Change user email
      tags:
        - user
        - email
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequest'
        required: true
      responses:
        '200':
          description: >-
            Email change requested. An email with a verification link has been sent to the new address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/email/send-verification-email:
    post:
      summary: Send email verification email
      tags:
        - user
        - email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailSendVerificationEmailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
          description: >-
            Email verification email sent successfully

  /user/password:
    post:
      summary: >-
        Change user password. The user must be authenticated or provide a ticket
      tags:
        - user
        - password
      security:
        - BearerAuthElevated: []
        - {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordRequest'
        required: true
      responses:
        '200':
          description: >-
            Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/password/reset:
    post:
      summary: >-
        Request a password reset. An email with a verification link will be sent to the user's address
      tags:
        - user
        - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetRequest'
        required: true
      responses:
        '200':
          description: >-
            Password reset requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /verify:
    get:
      summary: >-
        Verify tickets created by email verification, email passwordless authentication (magic link),
        or password reset
      tags:
        - verify
      parameters:
        - $ref: '#/components/parameters/TicketQuery'
        - $ref: '#/components/parameters/TicketTypeQuery'
        - $ref: '#/components/parameters/RedirectToQuery'
      responses:
        302:
          description: Redirect response
          headers:
            Location:
              $ref: '#/components/headers/RedirectLocation'
          content: {}

  /token/verify:
    post:
      summary: Verify JWT token
      description: If request body is not passed the authorization header will be used to be verified
      tags:
        - General
      security:
        - BearerAuth: []
        - {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                example: "OK"
          description: Valid JWT token

  /version:
    get:
      summary: Get version
      tags:
        - version
      responses:
        '200':
          description: >-
            Version of the service
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  version:
                    type: string
                    example: 0.0.0-dev
                required:
                  - version

  /user/mfa:
    post:
      summary: Activate/deactivate Multi-factor authentication
      tags:
        - mfa
        - totp
        - user
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMfaRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/webauthn/add:
    post:
      summary: Initialize adding of a new webauthn security key (device, browser)
      tags:
        - user
        - webauthn
      security:
        - BearerAuthElevated: []
      responses:
        '200':
          description: Challenge sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpWebauthnResponse'

  /user/webauthn/verify:
    post:
      summary: Verify adding of a new webauthn security key (device, browser)
      tags:
        - user
        - webauthn
        - verify
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddSecurityKeyVerifyRequest'
        required: true
      responses:
        '200':
          description: Security key added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddSecurityKeyVerifyResponse'

  /mfa/totp/generate:
    get:
      summary: Generate TOTP secret for MFA setup
      tags:
        - mfa
        - totp
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotpGenerateResponse'

  /elevate/webauthn:
    post:
      summary: Elevate access for an already signed in user using FIDO2 Webauthn
      tags:
        - elevate
        - webauthn
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInWebauthnResponse'
          description: >-
            Challenge sent

  /elevate/webauthn/verify:
    post:
      summary: Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
      tags:
        - elevate
        - webauthn
        - verify
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInWebauthnVerifyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Elevated successfully

  /user:
    get:
      summary: Get user information
      tags:
        - User management
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User information

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    BearerAuthElevated:
      type: http
      scheme: bearer
      description: >-
        This endpoint may require elevated permissions, depending on server settings.
        For details see https://docs.nhost.io/guides/auth/elevated-permissions

  schemas:
    JWKSet:
      type: object
      additionalProperties: false
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'
      required:
        - keys

    JWK:
      type: object
      additionalProperties: false
      properties:
        alg:
          type: string
        e:
          type: string
        kid:
          type: string
        kty:
          type: string
        n:
          type: string
        use:
          type: string
      required:
        - alg
        - e
        - kid
        - kty
        - n
        - use

    RefreshTokenRequest:
      type: object
      additionalProperties: false
      properties:
        refreshToken:
          description: Refresh Token
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - refreshToken

    SignOutRequest:
      type: object
      additionalProperties: false
      properties:
        refreshToken:
          description: Refresh Token
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        all:
          description: Sign out from all connected devices
          type: boolean
          default: false

    CreatePATRequest:
      type: object
      additionalProperties: false
      properties:
        expiresAt:
          description: Expiration date of the PAT
          format: date-time
          type: string

        metadata:
          type: object
          additionalProperties: true
          example:
            name: my-pat
            used-by: my-app-cli
          properties: {}
      required:
        - expiresAt

    CreatePATResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          description: ID of the PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - id
        - personalAccessToken

    ErrorResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          description: HTTP status error code
          type: integer
        message:
          description: Human friendly error message
          type: string
        error:
          description: Error code that identifies the application error
          type: string
          enum:
            - default-role-must-be-in-allowed-roles
            - disabled-endpoint
            - disabled-user
            - email-already-in-use
            - email-already-verified
            - forbidden-anonymous
            - internal-server-error
            - invalid-email-password
            - invalid-request
            - locale-not-allowed
            - password-too-short
            - password-in-hibp-database
            - redirectTo-not-allowed
            - role-not-allowed
            - signup-disabled
            - unverified-user
            - user-not-anonymous
            - invalid-pat
            - invalid-refresh-token
            - invalid-ticket
            - disabled-mfa-totp
            - no-totp-secret
            - invalid-totp
            - mfa-type-not-found
            - totp-already-active
            - invalid-state
            - oauth-token-echange-failed
            - oauth-profile-fetch-failed
            - oauth-provider-error
            - invalid-otp
            - cannot-send-sms
      required:
        - status
        - message
        - error

    SignInEmailPasswordResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: '#/components/schemas/Session'
        mfa:
          $ref: '#/components/schemas/MFAChallengePayload'

    MFAChallengePayload:
      type: object
      additionalProperties: false
      properties:
        ticket:
          type: string
      required:
        - ticket

    SessionPayload:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: '#/components/schemas/Session'

    Session:
      type: object
      additionalProperties: false
      properties:
        accessToken:
          type: string
        accessTokenExpiresIn:
          type: integer
          format: int64
        refreshTokenId:
          description: Refresh token id
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        refreshToken:
          description: Refresh token during authentication or when refreshing the JWT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - accessTokenExpiresIn
        - refreshToken
        - refreshTokenId

    SignInPATRequest:
      type: object
      additionalProperties: false
      properties:
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - personalAccessToken

    User:
      type: object
      additionalProperties: false
      properties:
        avatarUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        emailVerified:
          type: boolean
        id:
          description: Id of the user
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        isAnonymous:
          type: boolean
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        phoneNumber:
          type: string
        phoneNumberVerified:
          type: boolean
        activeMfaType:
          type: string
          description: Active MFA type for the user
          nullable: true
        roles:
          example:
            - me
            - user
          type: array
          items:
            type: string
      required:
        - avatarUrl
        - createdAt
        - defaultRole
        - displayName
        - emailVerified
        - id
        - isAnonymous
        - locale
        - metadata
        - phoneNumberVerified
        - roles

    UserDeanonymizeRequest:
      type: object
      additionalProperties: false
      properties:
        signInMethod:
          description: Which sign-in method to use
          type: string
          enum:
            - email-password
            - passwordless
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        connection:
          deprecated: true
          description: Deprecated, will be ignored
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - signInMethod
        - email

    UserEmailChangeRequest:
      type: object
      additionalProperties: false
      properties:
        newEmail:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/OptionsRedirectTo'
      required:
        - newEmail

    UserEmailSendVerificationEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/OptionsRedirectTo'
      required:
        - email

    UserPasswordResetRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/OptionsRedirectTo'
      required:
        - email

    UserPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        newPassword:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        ticket:
          type: string
          pattern: ^passwordReset\:.*$
          description: Ticket to reset the password, required if the user is not authenticated
      required:
        - newPassword

    OKResponse:
      type: string
      additionalProperties: false
      enum:
        - OK

    OptionsRedirectTo:
      type: object
      additionalProperties: false
      properties:
        redirectTo:
          type: string
          format: uri
          example: https://my-app.com/catch-redirection

    SigninAnonymousRequest:
      type: object
      additionalProperties: false
      properties:
        displayName:
          example: John Smith
          type: string
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}

    SignInEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
      required:
        - email
        - password

    SignInPasswordlessEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - email

    SignInOTPEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - email

    SignInOTPEmailVerifyRequest:
      type: object
      additionalProperties: false
      properties:
        otp:
          type: string
          description: One time password
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
      required:
        - otp
        - email

    SignInOTPEmailVerifyResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: '#/components/schemas/Session'

    SignInPasswordlessSmsRequest:
      type: object
      additionalProperties: false
      properties:
        phoneNumber:
          description: Phone number of the user
          example: '+123456789'
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - phoneNumber

    SignInPasswordlessSmsOtpRequest:
      type: object
      additionalProperties: false
      properties:
        phoneNumber:
          description: Phone number of the user
          example: '+123456789'
          type: string
        otp:
          type: string
          description: One-time password received by SMS
      required:
        - phoneNumber
        - otp

    SignInPasswordlessSmsOtpResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: '#/components/schemas/Session'
        mfa:
          $ref: '#/components/schemas/MFAChallengePayload'

    SignUpEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - email
        - password

    SignUpOptions:
      type: object
      additionalProperties: false
      properties:
        allowedRoles:
          example:
            - me
            - user
          type: array
          items:
            type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
          # This is a very permissive regex that allows most characters
          # but forbids characters like `&`, '/' and ':' that could be used for XSS
          pattern: ^[\p{L}\p{N}\p{S} ,.'-]+$
          maxLength: 32
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        redirectTo:
          type: string
          format: uri
          example: https://my-app.com/catch-redirection

    SignInWebauthnRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string

    SignUpWebauthnRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - email

    SignInWebauthnResponse:
      type: object
      x-go-type-import:
        name: protocol
        path: github.com/go-webauthn/webauthn/protocol
      x-go-type: protocol.PublicKeyCredentialRequestOptions

    SignUpWebauthnResponse:
      type: object
      x-go-type-import:
        name: protocol
        path: github.com/go-webauthn/webauthn/protocol
      x-go-type: protocol.PublicKeyCredentialCreationOptions

    SignInWebauthnVerifyRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email. Deprecated, no longer used
          example: john.smith@nhost.io
          format: email
          type: string
          deprecated: true
        credential:
          type: object
          additionalProperties: true
          x-go-type-import:
            name: protocol
            path: github.com/go-webauthn/webauthn/protocol
          x-go-type: protocol.CredentialAssertionResponse
      required:
        - credential

    SignUpWebauthnVerifyRequest:
      type: object
      additionalProperties: false
      properties:
        credential:
          type: object
          additionalProperties: true
          x-go-type-import:
            name: protocol
            path: github.com/go-webauthn/webauthn/protocol
          x-go-type: protocol.CredentialCreationResponse
        options:
          $ref: '#/components/schemas/SignUpOptions'
        nickname:
          description: Nickname for the security key
          type: string
      required:
        - credential

    SignInIdTokenRequest:
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: '#/components/schemas/IdTokenProvider'
        idToken:
          type: string
          description: Apple ID token
        nonce:
          type: string
          description: Nonce used during sign in process
        options:
          $ref: '#/components/schemas/SignUpOptions'
      required:
        - provider
        - idToken

    SignInMfaTotpRequest:
      type: object
      additionalProperties: false
      properties:
        ticket:
          type: string
          description: Ticket
          pattern: ^mfaTotp:.*$
        otp:
          type: string
          description: One time password
      required:
        - ticket
        - otp

    IdTokenProvider:
      type: string
      additionalProperties: false
      enum:
        - apple
        - google

    LinkIdTokenRequest:
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: '#/components/schemas/IdTokenProvider'
        idToken:
          type: string
          description: Apple ID token
        nonce:
          type: string
          description: Nonce used during sign in process
      required:
        - provider
        - idToken

    UserMfaRequest:
      type: object
      additionalProperties: false
      properties:
        code:
          type: string
          description: MFA activation code
        activeMfaType:
          type: string
          enum: [totp, '']
          description: Type of MFA to activate. If not set or set to empty string, disable MFA
      required:
        - code

    VerifyTokenRequest:
      type: object
      additionalProperties: false
      properties:
        token:
          type: string
          description: JWT token to verify

    TotpGenerateResponse:
      type: object
      additionalProperties: false
      properties:
        imageUrl:
          type: string
          description: URL to QR code image for TOTP setup
        totpSecret:
          type: string
          description: TOTP secret for manual setup
      required:
        - imageUrl
        - totpSecret

    UserAddSecurityKeyVerifyRequest:
      type: object
      additionalProperties: false
      properties:
        credential:
          type: object
          additionalProperties: true
          x-go-type-import:
            name: protocol
            path: github.com/go-webauthn/webauthn/protocol
          x-go-type: protocol.CredentialCreationResponse
        nickname:
          type: string
          description: Optional nickname for the security key
      required:
        - credential

    UserAddSecurityKeyVerifyResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: ID of the newly added security key
        nickname:
          type: string
          description: Nickname of the security key
      required:
        - id

  parameters:
    SigninProvider:
      in: path
      name: provider
      required: true
      description: The name of the social provider
      schema:
        type: string
        enum:
          - apple
          - github
          - google
          - linkedin
          - discord
          - spotify
          - twitch
          - gitlab
          - bitbucket
          - workos
          - azuread
          - strava
          - facebook
          - windowslive
          - twitter
      deprecated: true

    TicketQuery:
      in: query
      name: ticket
      description: Ticket
      required: true
      schema:
        type: string
        description: Ticket
        example: 'verifyEmail:xxxxxxxx'

    TicketTypeQuery:
      in: query
      name: type
      description: Type of the ticket. Deprecated, no longer used
      required: false
      schema:
        type: string
        enum:
          - emailVerify
          - emailConfirmChange
          - signinPasswordless
          - passwordReset
        description: Type of the ticket
        example: email-verification
      deprecated: true

    RedirectToQuery:
      in: query
      name: redirectTo
      description: Target URL for the redirect
      required: true
      schema:
        description: Target URL for the redirect
        type: string
        format: uri
        example: https://my-app.com/catch-redirection

  headers:
    RedirectLocation:
      description: URL to redirect to
      schema:
        type: string
        format: uri
      required: true
