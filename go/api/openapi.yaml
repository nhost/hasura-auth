openapi: "3.0.0"
info:
  version: 1.0.0
  title: Nhost Auth
  description: Service to Authenticate
  termsOfService: http://swagger.io/terms/
  contact:
    name: Nhost's Support
    email: support@nhost.io
    url: https://nhost.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /healthz:
    head:
      summary: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy

    get:
      summary: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /pat:
    post:
      summary: Create a Personal Access Token (PAT)
      tags:
        - pat
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePATRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePATResponse'
          description: >-
            Successfully created a Personal Access Token

  /signin/email-password:
    post:
      summary: Sign in with email and password
      tags:
        - signin
        - email-and-password

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInEmailPasswordResponse'
          description: >-
            Successfully signed in. Null session means TOTP challenge is needed

  /signin/passwordless/email:
    post:
      summary: >-
        Sign in with magic link sent to user's email. If user doesn't exist, it will be created.
        The options object is optional and can be used to set the user's when signing up a
        new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPasswordlessEmailRequest'
        required: true
      responses:
        '200':
          description: >-
            Magic link sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/pat:
    post:
      summary: >-
        Sign in with Personal Access Token (PAT)
      tags:
        - signin
        - pat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPATRequest'
        required: true
      responses:
        '200':
          description: >-
            Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'

  /signup/email-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Successfully registered. Null session means email verification is
            pending
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Signup mechanism is disabled
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            User with given email already exists

      summary: Signup with email and password
      tags:
        - signup
        - email-and-password

  /user/email/change:
    post:
      summary: Change user email
      tags:
        - user
        - email-and-password
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequest'
      responses:
        '200':
          description: >-
            Email change requested. An email with a verification link has been sent to the new address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/password/reset:
    post:
      summary: >-
        Request a password reset. An email with a verification link will be sent to the user's address
      tags:
        - user
        - email-and-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetRequest'
      responses:
        '200':
          description: >-
            Password reset requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /version:
    get:
      summary: Get version
      tags:
        - version
      responses:
        '200':
          description: >-
            Version of the service
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  version:
                    type: string
                    example: 0.0.0-dev
                required:
                  - version

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    CreatePATRequest:
      type: object
      additionalProperties: false
      properties:
        expiresAt:
          description: Expiration date of the PAT
          format: date-time
          type: string

        metadata:
          type: object
          additionalProperties: true
          example:
            name: my-pat
            used-by: my-app-cli
          properties: {}
      required:
        - expiresAt

    CreatePATResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          description: ID of the PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - id
        - personalAccessToken

    ErrorResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          description: HTTP status error code
          type: integer
        message:
          description: Human friendly error message
          type: string
        error:
          description: Error code that identifies the application error
          type: string
          enum:
            - default-role-must-be-in-allowed-roles
            - disabled-endpoint
            - disabled-user
            - email-already-in-use
            - forbidden-anonymous
            - internal-server-error
            - invalid-email-password
            - invalid-request
            - locale-not-allowed
            - password-too-short
            - password-in-hibp-database
            - redirecTo-not-allowed
            - role-not-allowed
            - signup-disabled
            - unverified-user
            - invalid-pat
      required:
        - status
        - message
        - error

    SignInEmailPasswordResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: "#/components/schemas/Session"
        mfa:
          $ref: "#/components/schemas/MFAChallengePayload"

    MFAChallengePayload:
      type: object
      additionalProperties: false
      properties:
        ticket:
          type: string
      required:
        - ticket

    SessionPayload:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: "#/components/schemas/Session"

    Session:
      type: object
      additionalProperties: false
      properties:
        accessToken:
          type: string
        accessTokenExpiresIn:
          type: integer
          format: int64
        refreshToken:
          description: Refresh token during authentication or when refreshing the JWT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - accessTokenExpiresIn
        - refreshToken

    SignInPATRequest:
      type: object
      additionalProperties: false
      properties:
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - personalAccessToken

    User:
      type: object
      additionalProperties: false
      properties:
        avatarUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        emailVerified:
          type: boolean
        id:
          description: Id of the user
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        isAnonymous:
          type: boolean
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        phoneNumber:
          type: string
        phoneNumberVerified:
          type: boolean
        roles:
          example:
            - me
            - user
          type: array
          items:
            type: string
      required:
        - avatarUrl
        - createdAt
        - defaultRole
        - displayName
        - email
        - emailVerified
        - id
        - isAnonymous
        - locale
        - metadata
        - phoneNumber
        - phoneNumberVerified
        - roles

    UserEmailChangeRequest:
      type: object
      additionalProperties: false
      properties:
        newEmail:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/OptionsRedirectTo"
      required:
        - newEmail

    UserPasswordResetRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/OptionsRedirectTo"
      required:
        - email

    OKResponse:
      type: string
      additionalProperties: false
      enum:
        - OK

    OptionsRedirectTo:
      type: object
      additionalProperties: false
      properties:
        redirectTo:
          example: https://my-app.com/catch-redirection
          type: string

    SignInEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          type: string
      required:
        - email
        - password

    SignInPasswordlessEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email

    SignUpEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email
        - password

    SignUpOptions:
      type: object
      additionalProperties: false
      properties:
        allowedRoles:
          example:
            - me
            - user
          type: array
          items:
            type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        redirectTo:
          example: https://my-app.com/catch-redirection
          type: string
