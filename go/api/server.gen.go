// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32/bthP/Vwj2+8VeLMu1va7x07IhwFJ0aVAn20OTh7N4stiJpMaj7BiZ//eBlCxL",
	"ltKsQNcN2JvF49197ifv/MgTowqjUTvii0dOSYYKws8La419j1QYTegPCmsKtE5iICdGhFOBlFhZOGk0",
	"X/Cfbm6uGTlwJTH0Ali4N+JuVyBfcKkdrtHy/YgHcl/CRcPFXAaOSYHayVQiMZchg6LIZQL+cqWAjzjq",
	"UvHFhyDcasgjQrtBGx3oUm8glyKy+HuJ5PiIk1zrsoiEJFjlKLwMBTKPILcIYhdJHZWE/L7BTc5Kvfaw",
	"FRLBesj0UoFmqZWoRb6rrT/c7gnaj7iHIy0KD7320vF6hf0IwKw+YuI8gCUSBY2nEYEkQaIb8xsGYg95",
	"i37xUEiLdBkupsYqcFVwXs0HY2UxtUhZI7tr+fuKypwnM1F6hQxKl/nI1bEylm0z1KyW5G/4cL759cYb",
	"+wCqyL3OaTL7dvUqnUXJfHUWzV/jLDr77jVEYi4m6Usxn+LUIyzA+VDzBb+7W32YRGcQpfePr/d3d6uo",
	"+Zzvn/zd5no59Wx8INQlYUjQ/1lM+YK/iI+1EteFEt/6O6fRbEfiCb+f+PQTgb6GXW5A9ONNx0T4FMJD",
	"vniQfR1yrW+LC5/810C0NVYsA19fXaiQfvDPWSguVpHbsfxoMj0mJV32vc4MubE0fHTMtgNDz+0miKZn",
	"7QrQ39WX9z4pKgOGMB5ozKRMSS1VqdiMJRlYSBxa6gBfOjvR6+CPF8aK6Gz+x/99cUr9FvXaZXwxe66e",
	"D8Y1mO6fdP67o7kghPQfkF+3XJ9CTjg6LfY8N1sU701efQtMocyd1618/wi5e9+y6uRcOlQ02CbqA7AW",
	"dv67luw1dRRVotp+qw96EoWkIofdFagg4cjwxmSaLX2GDLHlJoFTnaGgToPrtiY6hpLVfG1kgU3BwyF+",
	"0040p4Nt3oEAB8+GpcH2uG9pfOSptOQqk4OdfMRzaE4qo4cq0qKQFhN3Y7qWZ84VtIhjtYugKMaJUR0L",
	"++Q4AZdk0UGed1Y/a/cjflt3uc9Jvg04sLc2H0ygxCI4FOeu87gIcBg5qXAwQ/6pHPtqTS0QfkHrJxnR",
	"sbH2cM2xMiZH0J5FDnSyy9DB/MvZ88y/6umUdK6N3ilT0l8z9r9Z7EVmNF6ValWVYA9Yi/55uWP/7nfh",
	"dH5tar5biqNWr2iCPGrKpJ0m3S7QCoqfoJzc4M8p3HgMp8XUdeOw0w4e6T/D3hKpU1PtNNpB4lrTDqey",
	"KIx17WLXVVSv/Mk3xJbVDe9D3xCbTtxw7E+TeIl2IxNkzrDz45TsDctlgvW2VWs5LyDJkE3Hk56C7XY7",
	"hkAeG7uOa16K317+eHG1vIim48k4cyoPwUOr6F1aa66FLOKYtrBeox1LE4crsS9m6fLGwICQj/gGbTVs",
	"8pfjyXhSzWmooZB8wWfhKPSWLCRPXC1YcbVVtQezwlDwry+tsBlcCr7g14bcMrB0RlFeJRmS+8GI3SFC",
	"qIOE1iYYf6RqDqZmdn1+chwaevfdvHa2xHBQLcHBtOlk8uWAdCf8oP0kVcqwPKRlnu+YxbUkhxbFmF2V",
	"ec7qDYApBE3VY8U2IeXrrUsSK1CLuoLnk9kXg979d2AIeQgnU5hkoCUpj6XZtwOYs68Hxs84bCtdxtZy",
	"g7p2Vb3tM3yQ5Cj0NCqVArs74g9M9XUtmj3Clwmsybe+KtWPfyFocUz4+/1+v/8zAAD//5rYi21kEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
