// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(c *gin.Context)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSigninEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSigninEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninEmailPassword(c)
}

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// PostUserEmailChange operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailChange(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailChange(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signin/email-password", wrapper.PostSigninEmailPassword)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
	router.POST(options.BaseURL+"/user/email/change", wrapper.PostUserEmailChange)
}

type PostSigninEmailPasswordRequestObject struct {
	Body *PostSigninEmailPasswordJSONRequestBody
}

type PostSigninEmailPasswordResponseObject interface {
	VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSigninEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response PostSigninEmailPassword200JSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailChangeRequestObject struct {
	Body *PostUserEmailChangeJSONRequestBody
}

type PostUserEmailChangeResponseObject interface {
	VisitPostUserEmailChangeResponse(w http.ResponseWriter) error
}

type PostUserEmailChange200JSONResponse UserEmailChangeResponse

func (response PostUserEmailChange200JSONResponse) VisitPostUserEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(ctx context.Context, request PostSigninEmailPasswordRequestObject) (PostSigninEmailPasswordResponseObject, error)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(ctx context.Context, request PostUserEmailChangeRequestObject) (PostUserEmailChangeResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSigninEmailPassword operation middleware
func (sh *strictHandler) PostSigninEmailPassword(ctx *gin.Context) {
	var request PostSigninEmailPasswordRequestObject

	var body PostSigninEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninEmailPassword(ctx, request.(PostSigninEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSigninEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailChange operation middleware
func (sh *strictHandler) PostUserEmailChange(ctx *gin.Context) {
	var request PostUserEmailChangeRequestObject

	var body PostUserEmailChangeJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailChange(ctx, request.(PostUserEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailChangeResponseObject); ok {
		if err := validResponse.VisitPostUserEmailChangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
