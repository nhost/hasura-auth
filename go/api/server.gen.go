// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(c *gin.Context)
	// Sign in with magic link sent to user's email. If user doesn't exist, it will be created. The options object is optional and can be used to set the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(c *gin.Context)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(c *gin.Context)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSigninEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSigninEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninEmailPassword(c)
}

// PostSigninPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPasswordlessEmail(c)
}

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// PostUserEmailChange operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailChange(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailChange(c)
}

// PostUserPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostUserPasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserPasswordReset(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signin/email-password", wrapper.PostSigninEmailPassword)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.PostSigninPasswordlessEmail)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
	router.POST(options.BaseURL+"/user/email/change", wrapper.PostUserEmailChange)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.PostUserPasswordReset)
}

type PostSigninEmailPasswordRequestObject struct {
	Body *PostSigninEmailPasswordJSONRequestBody
}

type PostSigninEmailPasswordResponseObject interface {
	VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSigninEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response PostSigninEmailPassword200JSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPasswordlessEmailRequestObject struct {
	Body *PostSigninPasswordlessEmailJSONRequestBody
}

type PostSigninPasswordlessEmailResponseObject interface {
	VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error
}

type PostSigninPasswordlessEmail200JSONResponse OKResponse

func (response PostSigninPasswordlessEmail200JSONResponse) VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailChangeRequestObject struct {
	Body *PostUserEmailChangeJSONRequestBody
}

type PostUserEmailChangeResponseObject interface {
	VisitPostUserEmailChangeResponse(w http.ResponseWriter) error
}

type PostUserEmailChange200JSONResponse OKResponse

func (response PostUserEmailChange200JSONResponse) VisitPostUserEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserPasswordResetRequestObject struct {
	Body *PostUserPasswordResetJSONRequestBody
}

type PostUserPasswordResetResponseObject interface {
	VisitPostUserPasswordResetResponse(w http.ResponseWriter) error
}

type PostUserPasswordReset200JSONResponse OKResponse

func (response PostUserPasswordReset200JSONResponse) VisitPostUserPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(ctx context.Context, request PostSigninEmailPasswordRequestObject) (PostSigninEmailPasswordResponseObject, error)
	// Sign in with magic link sent to user's email. If user doesn't exist, it will be created. The options object is optional and can be used to set the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(ctx context.Context, request PostSigninPasswordlessEmailRequestObject) (PostSigninPasswordlessEmailResponseObject, error)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(ctx context.Context, request PostUserEmailChangeRequestObject) (PostUserEmailChangeResponseObject, error)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(ctx context.Context, request PostUserPasswordResetRequestObject) (PostUserPasswordResetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSigninEmailPassword operation middleware
func (sh *strictHandler) PostSigninEmailPassword(ctx *gin.Context) {
	var request PostSigninEmailPasswordRequestObject

	var body PostSigninEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninEmailPassword(ctx, request.(PostSigninEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSigninEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPasswordlessEmail operation middleware
func (sh *strictHandler) PostSigninPasswordlessEmail(ctx *gin.Context) {
	var request PostSigninPasswordlessEmailRequestObject

	var body PostSigninPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPasswordlessEmail(ctx, request.(PostSigninPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitPostSigninPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailChange operation middleware
func (sh *strictHandler) PostUserEmailChange(ctx *gin.Context) {
	var request PostUserEmailChangeRequestObject

	var body PostUserEmailChangeJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailChange(ctx, request.(PostUserEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailChangeResponseObject); ok {
		if err := validResponse.VisitPostUserEmailChangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserPasswordReset operation middleware
func (sh *strictHandler) PostUserPasswordReset(ctx *gin.Context) {
	var request PostUserPasswordResetRequestObject

	var body PostUserPasswordResetJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserPasswordReset(ctx, request.(PostUserPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserPasswordResetResponseObject); ok {
		if err := validResponse.VisitPostUserPasswordResetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6z8CAAD//5Dlgt6QIQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
