// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetWellKnownJwksJson(c *gin.Context)
	// Health check
	// (GET /healthz)
	GetHealthz(c *gin.Context)
	// Health check
	// (HEAD /healthz)
	HeadHealthz(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	PostLinkIdtoken(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	PostPat(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(c *gin.Context)
	// Sign in with in an id token
	// (POST /signin/idtoken)
	PostSigninIdtoken(c *gin.Context)
	// Sign in with a one time password sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/otp/email)
	PostSigninOtpEmail(c *gin.Context)
	// Verify OTP and return a session if validation is successful
	// (POST /signin/otp/verify)
	PostSigninOtpVerify(c *gin.Context)
	// Sign in with magic link sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	PostSigninPat(c *gin.Context)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
	// Signup with webauthn
	// (POST /signup/webauthn)
	PostSignupWebauthn(c *gin.Context)
	// Verify webauthn signup
	// (POST /signup/webauthn/verify)
	PostSignupWebauthnVerify(c *gin.Context)
	// Refresh the JWT access token
	// (POST /token)
	PostToken(c *gin.Context)
	// Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
	// (POST /user/deanonymize)
	PostUserDeanonymize(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(c *gin.Context)
	// Send email verification email
	// (POST /user/email/send-verification-email)
	PostUserEmailSendVerificationEmail(c *gin.Context)
	// Change user password. The user must be authenticated or provide a ticket
	// (POST /user/password)
	PostUserPassword(c *gin.Context)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(c *gin.Context)
	// Verify tickets created by email verification, email passwordless authentication (magic link), or password reset
	// (GET /verify)
	GetVerify(c *gin.Context, params GetVerifyParams)
	// Get version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetWellKnownJwksJson operation middleware
func (siw *ServerInterfaceWrapper) GetWellKnownJwksJson(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWellKnownJwksJson(c)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthz(c)
}

// HeadHealthz operation middleware
func (siw *ServerInterfaceWrapper) HeadHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadHealthz(c)
}

// PostLinkIdtoken operation middleware
func (siw *ServerInterfaceWrapper) PostLinkIdtoken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLinkIdtoken(c)
}

// PostPat operation middleware
func (siw *ServerInterfaceWrapper) PostPat(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPat(c)
}

// PostSigninEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSigninEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninEmailPassword(c)
}

// PostSigninIdtoken operation middleware
func (siw *ServerInterfaceWrapper) PostSigninIdtoken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninIdtoken(c)
}

// PostSigninOtpEmail operation middleware
func (siw *ServerInterfaceWrapper) PostSigninOtpEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninOtpEmail(c)
}

// PostSigninOtpVerify operation middleware
func (siw *ServerInterfaceWrapper) PostSigninOtpVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninOtpVerify(c)
}

// PostSigninPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPasswordlessEmail(c)
}

// PostSigninPat operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPat(c)
}

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// PostSignupWebauthn operation middleware
func (siw *ServerInterfaceWrapper) PostSignupWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupWebauthn(c)
}

// PostSignupWebauthnVerify operation middleware
func (siw *ServerInterfaceWrapper) PostSignupWebauthnVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupWebauthnVerify(c)
}

// PostToken operation middleware
func (siw *ServerInterfaceWrapper) PostToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostToken(c)
}

// PostUserDeanonymize operation middleware
func (siw *ServerInterfaceWrapper) PostUserDeanonymize(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserDeanonymize(c)
}

// PostUserEmailChange operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailChange(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailChange(c)
}

// PostUserEmailSendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailSendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailSendVerificationEmail(c)
}

// PostUserPassword operation middleware
func (siw *ServerInterfaceWrapper) PostUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserPassword(c)
}

// PostUserPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostUserPasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserPasswordReset(c)
}

// GetVerify operation middleware
func (siw *ServerInterfaceWrapper) GetVerify(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVerifyParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVerify(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetWellKnownJwksJson)
	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HeadHealthz)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.PostLinkIdtoken)
	router.POST(options.BaseURL+"/pat", wrapper.PostPat)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.PostSigninEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.PostSigninIdtoken)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.PostSigninOtpEmail)
	router.POST(options.BaseURL+"/signin/otp/verify", wrapper.PostSigninOtpVerify)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.PostSigninPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/pat", wrapper.PostSigninPat)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.PostSignupWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.PostSignupWebauthnVerify)
	router.POST(options.BaseURL+"/token", wrapper.PostToken)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.PostUserDeanonymize)
	router.POST(options.BaseURL+"/user/email/change", wrapper.PostUserEmailChange)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.PostUserEmailSendVerificationEmail)
	router.POST(options.BaseURL+"/user/password", wrapper.PostUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.PostUserPasswordReset)
	router.GET(options.BaseURL+"/verify", wrapper.GetVerify)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetWellKnownJwksJsonRequestObject struct {
}

type GetWellKnownJwksJsonResponseObject interface {
	VisitGetWellKnownJwksJsonResponse(w http.ResponseWriter) error
}

type GetWellKnownJwksJson200JSONResponse JWKSet

func (response GetWellKnownJwksJson200JSONResponse) VisitGetWellKnownJwksJsonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(w http.ResponseWriter) error
}

type GetHealthz200JSONResponse OKResponse

func (response GetHealthz200JSONResponse) VisitGetHealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HeadHealthzRequestObject struct {
}

type HeadHealthzResponseObject interface {
	VisitHeadHealthzResponse(w http.ResponseWriter) error
}

type HeadHealthz200Response struct {
}

func (response HeadHealthz200Response) VisitHeadHealthzResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostLinkIdtokenRequestObject struct {
	Body *PostLinkIdtokenJSONRequestBody
}

type PostLinkIdtokenResponseObject interface {
	VisitPostLinkIdtokenResponse(w http.ResponseWriter) error
}

type PostLinkIdtoken200JSONResponse OKResponse

func (response PostLinkIdtoken200JSONResponse) VisitPostLinkIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPatRequestObject struct {
	Body *PostPatJSONRequestBody
}

type PostPatResponseObject interface {
	VisitPostPatResponse(w http.ResponseWriter) error
}

type PostPat200JSONResponse CreatePATResponse

func (response PostPat200JSONResponse) VisitPostPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninEmailPasswordRequestObject struct {
	Body *PostSigninEmailPasswordJSONRequestBody
}

type PostSigninEmailPasswordResponseObject interface {
	VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSigninEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response PostSigninEmailPassword200JSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninIdtokenRequestObject struct {
	Body *PostSigninIdtokenJSONRequestBody
}

type PostSigninIdtokenResponseObject interface {
	VisitPostSigninIdtokenResponse(w http.ResponseWriter) error
}

type PostSigninIdtoken200JSONResponse SessionPayload

func (response PostSigninIdtoken200JSONResponse) VisitPostSigninIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninOtpEmailRequestObject struct {
	Body *PostSigninOtpEmailJSONRequestBody
}

type PostSigninOtpEmailResponseObject interface {
	VisitPostSigninOtpEmailResponse(w http.ResponseWriter) error
}

type PostSigninOtpEmail200JSONResponse OKResponse

func (response PostSigninOtpEmail200JSONResponse) VisitPostSigninOtpEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninOtpVerifyRequestObject struct {
	Body *PostSigninOtpVerifyJSONRequestBody
}

type PostSigninOtpVerifyResponseObject interface {
	VisitPostSigninOtpVerifyResponse(w http.ResponseWriter) error
}

type PostSigninOtpVerify200JSONResponse SignInOTPVerifyResponse

func (response PostSigninOtpVerify200JSONResponse) VisitPostSigninOtpVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPasswordlessEmailRequestObject struct {
	Body *PostSigninPasswordlessEmailJSONRequestBody
}

type PostSigninPasswordlessEmailResponseObject interface {
	VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error
}

type PostSigninPasswordlessEmail200JSONResponse OKResponse

func (response PostSigninPasswordlessEmail200JSONResponse) VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPatRequestObject struct {
	Body *PostSigninPatJSONRequestBody
}

type PostSigninPatResponseObject interface {
	VisitPostSigninPatResponse(w http.ResponseWriter) error
}

type PostSigninPat200JSONResponse SessionPayload

func (response PostSigninPat200JSONResponse) VisitPostSigninPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupWebauthnRequestObject struct {
	Body *PostSignupWebauthnJSONRequestBody
}

type PostSignupWebauthnResponseObject interface {
	VisitPostSignupWebauthnResponse(w http.ResponseWriter) error
}

type PostSignupWebauthn200JSONResponse SignUpWebauthnResponse

func (response PostSignupWebauthn200JSONResponse) VisitPostSignupWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupWebauthnVerifyRequestObject struct {
	Body *PostSignupWebauthnVerifyJSONRequestBody
}

type PostSignupWebauthnVerifyResponseObject interface {
	VisitPostSignupWebauthnVerifyResponse(w http.ResponseWriter) error
}

type PostSignupWebauthnVerify200JSONResponse SessionPayload

func (response PostSignupWebauthnVerify200JSONResponse) VisitPostSignupWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTokenRequestObject struct {
	Body *PostTokenJSONRequestBody
}

type PostTokenResponseObject interface {
	VisitPostTokenResponse(w http.ResponseWriter) error
}

type PostToken200JSONResponse Session

func (response PostToken200JSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserDeanonymizeRequestObject struct {
	Body *PostUserDeanonymizeJSONRequestBody
}

type PostUserDeanonymizeResponseObject interface {
	VisitPostUserDeanonymizeResponse(w http.ResponseWriter) error
}

type PostUserDeanonymize200JSONResponse OKResponse

func (response PostUserDeanonymize200JSONResponse) VisitPostUserDeanonymizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailChangeRequestObject struct {
	Body *PostUserEmailChangeJSONRequestBody
}

type PostUserEmailChangeResponseObject interface {
	VisitPostUserEmailChangeResponse(w http.ResponseWriter) error
}

type PostUserEmailChange200JSONResponse OKResponse

func (response PostUserEmailChange200JSONResponse) VisitPostUserEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailSendVerificationEmailRequestObject struct {
	Body *PostUserEmailSendVerificationEmailJSONRequestBody
}

type PostUserEmailSendVerificationEmailResponseObject interface {
	VisitPostUserEmailSendVerificationEmailResponse(w http.ResponseWriter) error
}

type PostUserEmailSendVerificationEmail200JSONResponse OKResponse

func (response PostUserEmailSendVerificationEmail200JSONResponse) VisitPostUserEmailSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserPasswordRequestObject struct {
	Body *PostUserPasswordJSONRequestBody
}

type PostUserPasswordResponseObject interface {
	VisitPostUserPasswordResponse(w http.ResponseWriter) error
}

type PostUserPassword200JSONResponse OKResponse

func (response PostUserPassword200JSONResponse) VisitPostUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserPasswordResetRequestObject struct {
	Body *PostUserPasswordResetJSONRequestBody
}

type PostUserPasswordResetResponseObject interface {
	VisitPostUserPasswordResetResponse(w http.ResponseWriter) error
}

type PostUserPasswordReset200JSONResponse OKResponse

func (response PostUserPasswordReset200JSONResponse) VisitPostUserPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVerifyRequestObject struct {
	Params GetVerifyParams
}

type GetVerifyResponseObject interface {
	VisitGetVerifyResponse(w http.ResponseWriter) error
}

type GetVerify302ResponseHeaders struct {
	Location string
}

type GetVerify302Response struct {
	Headers GetVerify302ResponseHeaders
}

func (response GetVerify302Response) VisitGetVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetWellKnownJwksJson(ctx context.Context, request GetWellKnownJwksJsonRequestObject) (GetWellKnownJwksJsonResponseObject, error)
	// Health check
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Health check
	// (HEAD /healthz)
	HeadHealthz(ctx context.Context, request HeadHealthzRequestObject) (HeadHealthzResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	PostLinkIdtoken(ctx context.Context, request PostLinkIdtokenRequestObject) (PostLinkIdtokenResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	PostPat(ctx context.Context, request PostPatRequestObject) (PostPatResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(ctx context.Context, request PostSigninEmailPasswordRequestObject) (PostSigninEmailPasswordResponseObject, error)
	// Sign in with in an id token
	// (POST /signin/idtoken)
	PostSigninIdtoken(ctx context.Context, request PostSigninIdtokenRequestObject) (PostSigninIdtokenResponseObject, error)
	// Sign in with a one time password sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/otp/email)
	PostSigninOtpEmail(ctx context.Context, request PostSigninOtpEmailRequestObject) (PostSigninOtpEmailResponseObject, error)
	// Verify OTP and return a session if validation is successful
	// (POST /signin/otp/verify)
	PostSigninOtpVerify(ctx context.Context, request PostSigninOtpVerifyRequestObject) (PostSigninOtpVerifyResponseObject, error)
	// Sign in with magic link sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(ctx context.Context, request PostSigninPasswordlessEmailRequestObject) (PostSigninPasswordlessEmailResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	PostSigninPat(ctx context.Context, request PostSigninPatRequestObject) (PostSigninPatResponseObject, error)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
	// Signup with webauthn
	// (POST /signup/webauthn)
	PostSignupWebauthn(ctx context.Context, request PostSignupWebauthnRequestObject) (PostSignupWebauthnResponseObject, error)
	// Verify webauthn signup
	// (POST /signup/webauthn/verify)
	PostSignupWebauthnVerify(ctx context.Context, request PostSignupWebauthnVerifyRequestObject) (PostSignupWebauthnVerifyResponseObject, error)
	// Refresh the JWT access token
	// (POST /token)
	PostToken(ctx context.Context, request PostTokenRequestObject) (PostTokenResponseObject, error)
	// Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
	// (POST /user/deanonymize)
	PostUserDeanonymize(ctx context.Context, request PostUserDeanonymizeRequestObject) (PostUserDeanonymizeResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(ctx context.Context, request PostUserEmailChangeRequestObject) (PostUserEmailChangeResponseObject, error)
	// Send email verification email
	// (POST /user/email/send-verification-email)
	PostUserEmailSendVerificationEmail(ctx context.Context, request PostUserEmailSendVerificationEmailRequestObject) (PostUserEmailSendVerificationEmailResponseObject, error)
	// Change user password. The user must be authenticated or provide a ticket
	// (POST /user/password)
	PostUserPassword(ctx context.Context, request PostUserPasswordRequestObject) (PostUserPasswordResponseObject, error)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(ctx context.Context, request PostUserPasswordResetRequestObject) (PostUserPasswordResetResponseObject, error)
	// Verify tickets created by email verification, email passwordless authentication (magic link), or password reset
	// (GET /verify)
	GetVerify(ctx context.Context, request GetVerifyRequestObject) (GetVerifyResponseObject, error)
	// Get version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetWellKnownJwksJson operation middleware
func (sh *strictHandler) GetWellKnownJwksJson(ctx *gin.Context) {
	var request GetWellKnownJwksJsonRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWellKnownJwksJson(ctx, request.(GetWellKnownJwksJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWellKnownJwksJson")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWellKnownJwksJsonResponseObject); ok {
		if err := validResponse.VisitGetWellKnownJwksJsonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx *gin.Context) {
	var request GetHealthzRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthz(ctx, request.(GetHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthzResponseObject); ok {
		if err := validResponse.VisitGetHealthzResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HeadHealthz operation middleware
func (sh *strictHandler) HeadHealthz(ctx *gin.Context) {
	var request HeadHealthzRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadHealthz(ctx, request.(HeadHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HeadHealthzResponseObject); ok {
		if err := validResponse.VisitHeadHealthzResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLinkIdtoken operation middleware
func (sh *strictHandler) PostLinkIdtoken(ctx *gin.Context) {
	var request PostLinkIdtokenRequestObject

	var body PostLinkIdtokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLinkIdtoken(ctx, request.(PostLinkIdtokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLinkIdtoken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostLinkIdtokenResponseObject); ok {
		if err := validResponse.VisitPostLinkIdtokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPat operation middleware
func (sh *strictHandler) PostPat(ctx *gin.Context) {
	var request PostPatRequestObject

	var body PostPatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPat(ctx, request.(PostPatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPatResponseObject); ok {
		if err := validResponse.VisitPostPatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninEmailPassword operation middleware
func (sh *strictHandler) PostSigninEmailPassword(ctx *gin.Context) {
	var request PostSigninEmailPasswordRequestObject

	var body PostSigninEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninEmailPassword(ctx, request.(PostSigninEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSigninEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninIdtoken operation middleware
func (sh *strictHandler) PostSigninIdtoken(ctx *gin.Context) {
	var request PostSigninIdtokenRequestObject

	var body PostSigninIdtokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninIdtoken(ctx, request.(PostSigninIdtokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninIdtoken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninIdtokenResponseObject); ok {
		if err := validResponse.VisitPostSigninIdtokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninOtpEmail operation middleware
func (sh *strictHandler) PostSigninOtpEmail(ctx *gin.Context) {
	var request PostSigninOtpEmailRequestObject

	var body PostSigninOtpEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninOtpEmail(ctx, request.(PostSigninOtpEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninOtpEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninOtpEmailResponseObject); ok {
		if err := validResponse.VisitPostSigninOtpEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninOtpVerify operation middleware
func (sh *strictHandler) PostSigninOtpVerify(ctx *gin.Context) {
	var request PostSigninOtpVerifyRequestObject

	var body PostSigninOtpVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninOtpVerify(ctx, request.(PostSigninOtpVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninOtpVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninOtpVerifyResponseObject); ok {
		if err := validResponse.VisitPostSigninOtpVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPasswordlessEmail operation middleware
func (sh *strictHandler) PostSigninPasswordlessEmail(ctx *gin.Context) {
	var request PostSigninPasswordlessEmailRequestObject

	var body PostSigninPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPasswordlessEmail(ctx, request.(PostSigninPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitPostSigninPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPat operation middleware
func (sh *strictHandler) PostSigninPat(ctx *gin.Context) {
	var request PostSigninPatRequestObject

	var body PostSigninPatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPat(ctx, request.(PostSigninPatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPatResponseObject); ok {
		if err := validResponse.VisitPostSigninPatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupWebauthn operation middleware
func (sh *strictHandler) PostSignupWebauthn(ctx *gin.Context) {
	var request PostSignupWebauthnRequestObject

	var body PostSignupWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupWebauthn(ctx, request.(PostSignupWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupWebauthnResponseObject); ok {
		if err := validResponse.VisitPostSignupWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupWebauthnVerify operation middleware
func (sh *strictHandler) PostSignupWebauthnVerify(ctx *gin.Context) {
	var request PostSignupWebauthnVerifyRequestObject

	var body PostSignupWebauthnVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupWebauthnVerify(ctx, request.(PostSignupWebauthnVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupWebauthnVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupWebauthnVerifyResponseObject); ok {
		if err := validResponse.VisitPostSignupWebauthnVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostToken operation middleware
func (sh *strictHandler) PostToken(ctx *gin.Context) {
	var request PostTokenRequestObject

	var body PostTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostToken(ctx, request.(PostTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTokenResponseObject); ok {
		if err := validResponse.VisitPostTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserDeanonymize operation middleware
func (sh *strictHandler) PostUserDeanonymize(ctx *gin.Context) {
	var request PostUserDeanonymizeRequestObject

	var body PostUserDeanonymizeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserDeanonymize(ctx, request.(PostUserDeanonymizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserDeanonymize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserDeanonymizeResponseObject); ok {
		if err := validResponse.VisitPostUserDeanonymizeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailChange operation middleware
func (sh *strictHandler) PostUserEmailChange(ctx *gin.Context) {
	var request PostUserEmailChangeRequestObject

	var body PostUserEmailChangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailChange(ctx, request.(PostUserEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailChangeResponseObject); ok {
		if err := validResponse.VisitPostUserEmailChangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailSendVerificationEmail operation middleware
func (sh *strictHandler) PostUserEmailSendVerificationEmail(ctx *gin.Context) {
	var request PostUserEmailSendVerificationEmailRequestObject

	var body PostUserEmailSendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailSendVerificationEmail(ctx, request.(PostUserEmailSendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailSendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailSendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitPostUserEmailSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserPassword operation middleware
func (sh *strictHandler) PostUserPassword(ctx *gin.Context) {
	var request PostUserPasswordRequestObject

	var body PostUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserPassword(ctx, request.(PostUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserPasswordResponseObject); ok {
		if err := validResponse.VisitPostUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserPasswordReset operation middleware
func (sh *strictHandler) PostUserPasswordReset(ctx *gin.Context) {
	var request PostUserPasswordResetRequestObject

	var body PostUserPasswordResetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserPasswordReset(ctx, request.(PostUserPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserPasswordResetResponseObject); ok {
		if err := validResponse.VisitPostUserPasswordResetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVerify operation middleware
func (sh *strictHandler) GetVerify(ctx *gin.Context, params GetVerifyParams) {
	var request GetVerifyRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVerify(ctx, request.(GetVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVerifyResponseObject); ok {
		if err := validResponse.VisitGetVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
