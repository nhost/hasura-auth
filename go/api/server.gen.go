// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(c *gin.Context)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(c *gin.Context)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(c *gin.Context)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(c *gin.Context)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(c *gin.Context)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(c *gin.Context)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(c *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(c *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(c *gin.Context, provider SignInProviderCallbackPostParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(c *gin.Context)
	// Sign out
	// (POST /signout)
	SignOut(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(c *gin.Context)
	// Refresh access token
	// (POST /token)
	RefreshToken(c *gin.Context)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(c *gin.Context)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(c *gin.Context)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(c *gin.Context)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(c *gin.Context)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(c *gin.Context, params VerifyTicketParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetJWKs operation middleware
func (siw *ServerInterfaceWrapper) GetJWKs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKs(c)
}

// ElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) ElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ElevateWebauthn(c)
}

// VerifyElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifyElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyElevateWebauthn(c)
}

// HealthCheckGet operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckGet(c)
}

// HealthCheckHead operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckHead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckHead(c)
}

// LinkIdToken operation middleware
func (siw *ServerInterfaceWrapper) LinkIdToken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LinkIdToken(c)
}

// ChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserMfa(c)
}

// CreatePAT operation middleware
func (siw *ServerInterfaceWrapper) CreatePAT(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePAT(c)
}

// SignInAnonymous operation middleware
func (siw *ServerInterfaceWrapper) SignInAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInAnonymous(c)
}

// SignInEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignInEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInEmailPassword(c)
}

// SignInIdToken operation middleware
func (siw *ServerInterfaceWrapper) SignInIdToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInIdToken(c)
}

// VerifySignInMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInMfaTotp(c)
}

// SignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInOTPEmail(c)
}

// VerifySignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInOTPEmail(c)
}

// SignInPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessEmail(c)
}

// SignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessSms(c)
}

// VerifySignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInPasswordlessSms(c)
}

// SignInPAT operation middleware
func (siw *ServerInterfaceWrapper) SignInPAT(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPAT(c)
}

// SignInProvider operation middleware
func (siw *ServerInterfaceWrapper) SignInProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", false, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	if paramValue := c.Query("metadata"); paramValue != "" {

		var value map[string]interface{}
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'metadata' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Metadata = &value

	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProvider(c, provider, params)
}

// SignInProviderCallbackGet operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackGetParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderCallbackGetParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackGet(c, provider, params)
}

// SignInProviderCallbackPost operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackPostParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackPost(c, provider)
}

// SignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInWebauthn(c)
}

// VerifySignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInWebauthn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUpEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignUpEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpEmailPassword(c)
}

// SignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpWebauthn(c)
}

// VerifySignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignUpWebauthn(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// VerifyToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyToken(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// DeanonymizeUser operation middleware
func (siw *ServerInterfaceWrapper) DeanonymizeUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeanonymizeUser(c)
}

// ChangeUserEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserEmail(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserEmail(c)
}

// SendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendVerificationEmail(c)
}

// VerifyChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) VerifyChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyChangeUserMfa(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c)
}

// SendPasswordResetEmail operation middleware
func (siw *ServerInterfaceWrapper) SendPasswordResetEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendPasswordResetEmail(c)
}

// AddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) AddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddSecurityKey(c)
}

// VerifyAddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) VerifyAddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyAddSecurityKey(c)
}

// VerifyTicket operation middleware
func (siw *ServerInterfaceWrapper) VerifyTicket(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyTicketParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyTicket(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKs)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.ElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.VerifyElevateWebauthn)
	router.GET(options.BaseURL+"/healthz", wrapper.HealthCheckGet)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HealthCheckHead)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.LinkIdToken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.ChangeUserMfa)
	router.POST(options.BaseURL+"/pat", wrapper.CreatePAT)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.SignInAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.SignInEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.SignInIdToken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.VerifySignInMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.SignInOTPEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.VerifySignInOTPEmail)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.SignInPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.SignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.VerifySignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/pat", wrapper.SignInPAT)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.SignInProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackGet)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackPost)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.SignInWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.VerifySignInWebauthn)
	router.POST(options.BaseURL+"/signout", wrapper.SignOut)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.SignUpEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.SignUpWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.VerifySignUpWebauthn)
	router.POST(options.BaseURL+"/token", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.VerifyToken)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.DeanonymizeUser)
	router.POST(options.BaseURL+"/user/email/change", wrapper.ChangeUserEmail)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.SendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.VerifyChangeUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.SendPasswordResetEmail)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.AddSecurityKey)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.VerifyAddSecurityKey)
	router.GET(options.BaseURL+"/verify", wrapper.VerifyTicket)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetJWKsRequestObject struct {
}

type GetJWKsResponseObject interface {
	VisitGetJWKsResponse(w http.ResponseWriter) error
}

type GetJWKs200JSONResponse JWKSet

func (response GetJWKs200JSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJWKsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJWKsdefaultJSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ElevateWebauthnRequestObject struct {
}

type ElevateWebauthnResponseObject interface {
	VisitElevateWebauthnResponse(w http.ResponseWriter) error
}

type ElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response ElevateWebauthn200JSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ElevateWebauthndefaultJSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyElevateWebauthnRequestObject struct {
	Body *VerifyElevateWebauthnJSONRequestBody
}

type VerifyElevateWebauthnResponseObject interface {
	VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error
}

type VerifyElevateWebauthn200JSONResponse SessionPayload

func (response VerifyElevateWebauthn200JSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyElevateWebauthndefaultJSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckGetRequestObject struct {
}

type HealthCheckGetResponseObject interface {
	VisitHealthCheckGetResponse(w http.ResponseWriter) error
}

type HealthCheckGet200JSONResponse OKResponse

func (response HealthCheckGet200JSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckGetdefaultJSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckHeadRequestObject struct {
}

type HealthCheckHeadResponseObject interface {
	VisitHealthCheckHeadResponse(w http.ResponseWriter) error
}

type HealthCheckHead200Response struct {
}

func (response HealthCheckHead200Response) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheckHeaddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckHeaddefaultJSONResponse) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkIdTokenRequestObject struct {
	Body *LinkIdTokenJSONRequestBody
}

type LinkIdTokenResponseObject interface {
	VisitLinkIdTokenResponse(w http.ResponseWriter) error
}

type LinkIdToken200JSONResponse OKResponse

func (response LinkIdToken200JSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response LinkIdTokendefaultJSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserMfaRequestObject struct {
}

type ChangeUserMfaResponseObject interface {
	VisitChangeUserMfaResponse(w http.ResponseWriter) error
}

type ChangeUserMfa200JSONResponse TotpGenerateResponse

func (response ChangeUserMfa200JSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserMfadefaultJSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePATRequestObject struct {
	Body *CreatePATJSONRequestBody
}

type CreatePATResponseObject interface {
	VisitCreatePATResponse(w http.ResponseWriter) error
}

type CreatePAT200JSONResponse CreatePATResponse

func (response CreatePAT200JSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response CreatePATdefaultJSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInAnonymousRequestObject struct {
	Body *SignInAnonymousJSONRequestBody
}

type SignInAnonymousResponseObject interface {
	VisitSignInAnonymousResponse(w http.ResponseWriter) error
}

type SignInAnonymous200JSONResponse SessionPayload

func (response SignInAnonymous200JSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInAnonymousdefaultJSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInEmailPasswordRequestObject struct {
	Body *SignInEmailPasswordJSONRequestBody
}

type SignInEmailPasswordResponseObject interface {
	VisitSignInEmailPasswordResponse(w http.ResponseWriter) error
}

type SignInEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response SignInEmailPassword200JSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInEmailPassworddefaultJSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInIdTokenRequestObject struct {
	Body *SignInIdTokenJSONRequestBody
}

type SignInIdTokenResponseObject interface {
	VisitSignInIdTokenResponse(w http.ResponseWriter) error
}

type SignInIdToken200JSONResponse SessionPayload

func (response SignInIdToken200JSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInIdTokendefaultJSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInMfaTotpRequestObject struct {
	Body *VerifySignInMfaTotpJSONRequestBody
}

type VerifySignInMfaTotpResponseObject interface {
	VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error
}

type VerifySignInMfaTotp200JSONResponse SessionPayload

func (response VerifySignInMfaTotp200JSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInMfaTotpdefaultJSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInOTPEmailRequestObject struct {
	Body *SignInOTPEmailJSONRequestBody
}

type SignInOTPEmailResponseObject interface {
	VisitSignInOTPEmailResponse(w http.ResponseWriter) error
}

type SignInOTPEmail200JSONResponse OKResponse

func (response SignInOTPEmail200JSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInOTPEmaildefaultJSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInOTPEmailRequestObject struct {
	Body *VerifySignInOTPEmailJSONRequestBody
}

type VerifySignInOTPEmailResponseObject interface {
	VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error
}

type VerifySignInOTPEmail200JSONResponse SignInOTPEmailVerifyResponse

func (response VerifySignInOTPEmail200JSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInOTPEmaildefaultJSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessEmailRequestObject struct {
	Body *SignInPasswordlessEmailJSONRequestBody
}

type SignInPasswordlessEmailResponseObject interface {
	VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error
}

type SignInPasswordlessEmail200JSONResponse OKResponse

func (response SignInPasswordlessEmail200JSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessEmaildefaultJSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessSmsRequestObject struct {
	Body *SignInPasswordlessSmsJSONRequestBody
}

type SignInPasswordlessSmsResponseObject interface {
	VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type SignInPasswordlessSms200JSONResponse OKResponse

func (response SignInPasswordlessSms200JSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessSmsdefaultJSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInPasswordlessSmsRequestObject struct {
	Body *VerifySignInPasswordlessSmsJSONRequestBody
}

type VerifySignInPasswordlessSmsResponseObject interface {
	VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type VerifySignInPasswordlessSms200JSONResponse SignInPasswordlessSmsOtpResponse

func (response VerifySignInPasswordlessSms200JSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInPasswordlessSmsdefaultJSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPATRequestObject struct {
	Body *SignInPATJSONRequestBody
}

type SignInPATResponseObject interface {
	VisitSignInPATResponse(w http.ResponseWriter) error
}

type SignInPAT200JSONResponse SessionPayload

func (response SignInPAT200JSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPATdefaultJSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderRequestObject struct {
	Provider SignInProviderParamsProvider `json:"provider"`
	Params   SignInProviderParams
}

type SignInProviderResponseObject interface {
	VisitSignInProviderResponse(w http.ResponseWriter) error
}

type SignInProvider302ResponseHeaders struct {
	Location string
}

type SignInProvider302Response struct {
	Headers SignInProvider302ResponseHeaders
}

func (response SignInProvider302Response) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderdefaultJSONResponse) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackGetRequestObject struct {
	Provider SignInProviderCallbackGetParamsProvider `json:"provider"`
	Params   SignInProviderCallbackGetParams
}

type SignInProviderCallbackGetResponseObject interface {
	VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackGet302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackGet302Response struct {
	Headers SignInProviderCallbackGet302ResponseHeaders
}

func (response SignInProviderCallbackGet302Response) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackGetdefaultJSONResponse) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackPostRequestObject struct {
	Provider SignInProviderCallbackPostParamsProvider `json:"provider"`
	Body     *SignInProviderCallbackPostFormdataRequestBody
}

type SignInProviderCallbackPostResponseObject interface {
	VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackPost302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackPost302Response struct {
	Headers SignInProviderCallbackPost302ResponseHeaders
}

func (response SignInProviderCallbackPost302Response) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackPostdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackPostdefaultJSONResponse) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInWebauthnRequestObject struct {
	Body *SignInWebauthnJSONRequestBody
}

type SignInWebauthnResponseObject interface {
	VisitSignInWebauthnResponse(w http.ResponseWriter) error
}

type SignInWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response SignInWebauthn200JSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInWebauthndefaultJSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInWebauthnRequestObject struct {
	Body *VerifySignInWebauthnJSONRequestBody
}

type VerifySignInWebauthnResponseObject interface {
	VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignInWebauthn200JSONResponse SessionPayload

func (response VerifySignInWebauthn200JSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInWebauthndefaultJSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignOutRequestObject struct {
	Body *SignOutJSONRequestBody
}

type SignOutResponseObject interface {
	VisitSignOutResponse(w http.ResponseWriter) error
}

type SignOut200JSONResponse OKResponse

func (response SignOut200JSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignOutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignOutdefaultJSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpEmailPasswordRequestObject struct {
	Body *SignUpEmailPasswordJSONRequestBody
}

type SignUpEmailPasswordResponseObject interface {
	VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error
}

type SignUpEmailPassword200JSONResponse SessionPayload

func (response SignUpEmailPassword200JSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpEmailPassworddefaultJSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpWebauthnRequestObject struct {
	Body *SignUpWebauthnJSONRequestBody
}

type SignUpWebauthnResponseObject interface {
	VisitSignUpWebauthnResponse(w http.ResponseWriter) error
}

type SignUpWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response SignUpWebauthn200JSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpWebauthndefaultJSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignUpWebauthnRequestObject struct {
	Body *VerifySignUpWebauthnJSONRequestBody
}

type VerifySignUpWebauthnResponseObject interface {
	VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignUpWebauthn200JSONResponse SessionPayload

func (response VerifySignUpWebauthn200JSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignUpWebauthndefaultJSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse Session

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTokenRequestObject struct {
	Body *VerifyTokenJSONRequestBody
}

type VerifyTokenResponseObject interface {
	VisitVerifyTokenResponse(w http.ResponseWriter) error
}

type VerifyToken200JSONResponse string

func (response VerifyToken200JSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTokendefaultJSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeanonymizeUserRequestObject struct {
	Body *DeanonymizeUserJSONRequestBody
}

type DeanonymizeUserResponseObject interface {
	VisitDeanonymizeUserResponse(w http.ResponseWriter) error
}

type DeanonymizeUser200JSONResponse OKResponse

func (response DeanonymizeUser200JSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeanonymizeUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeanonymizeUserdefaultJSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserEmailRequestObject struct {
	Body *ChangeUserEmailJSONRequestBody
}

type ChangeUserEmailResponseObject interface {
	VisitChangeUserEmailResponse(w http.ResponseWriter) error
}

type ChangeUserEmail200JSONResponse OKResponse

func (response ChangeUserEmail200JSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserEmaildefaultJSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendVerificationEmailRequestObject struct {
	Body *SendVerificationEmailJSONRequestBody
}

type SendVerificationEmailResponseObject interface {
	VisitSendVerificationEmailResponse(w http.ResponseWriter) error
}

type SendVerificationEmail200JSONResponse OKResponse

func (response SendVerificationEmail200JSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendVerificationEmaildefaultJSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyChangeUserMfaRequestObject struct {
	Body *VerifyChangeUserMfaJSONRequestBody
}

type VerifyChangeUserMfaResponseObject interface {
	VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error
}

type VerifyChangeUserMfa200JSONResponse OKResponse

func (response VerifyChangeUserMfa200JSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyChangeUserMfadefaultJSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200JSONResponse OKResponse

func (response ChangeUserPassword200JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendPasswordResetEmailRequestObject struct {
	Body *SendPasswordResetEmailJSONRequestBody
}

type SendPasswordResetEmailResponseObject interface {
	VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error
}

type SendPasswordResetEmail200JSONResponse OKResponse

func (response SendPasswordResetEmail200JSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendPasswordResetEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendPasswordResetEmaildefaultJSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddSecurityKeyRequestObject struct {
}

type AddSecurityKeyResponseObject interface {
	VisitAddSecurityKeyResponse(w http.ResponseWriter) error
}

type AddSecurityKey200JSONResponse PublicKeyCredentialCreationOptions

func (response AddSecurityKey200JSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response AddSecurityKeydefaultJSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAddSecurityKeyRequestObject struct {
	Body *VerifyAddSecurityKeyJSONRequestBody
}

type VerifyAddSecurityKeyResponseObject interface {
	VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error
}

type VerifyAddSecurityKey200JSONResponse VerifyAddSecurityKeyResponse

func (response VerifyAddSecurityKey200JSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyAddSecurityKeydefaultJSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTicketRequestObject struct {
	Params VerifyTicketParams
}

type VerifyTicketResponseObject interface {
	VisitVerifyTicketResponse(w http.ResponseWriter) error
}

type VerifyTicket302ResponseHeaders struct {
	Location string
}

type VerifyTicket302Response struct {
	Headers VerifyTicket302ResponseHeaders
}

func (response VerifyTicket302Response) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type VerifyTicketdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTicketdefaultJSONResponse) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(ctx context.Context, request GetJWKsRequestObject) (GetJWKsResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(ctx context.Context, request ElevateWebauthnRequestObject) (ElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(ctx context.Context, request VerifyElevateWebauthnRequestObject) (VerifyElevateWebauthnResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(ctx context.Context, request HealthCheckGetRequestObject) (HealthCheckGetResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(ctx context.Context, request HealthCheckHeadRequestObject) (HealthCheckHeadResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(ctx context.Context, request LinkIdTokenRequestObject) (LinkIdTokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(ctx context.Context, request ChangeUserMfaRequestObject) (ChangeUserMfaResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(ctx context.Context, request CreatePATRequestObject) (CreatePATResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(ctx context.Context, request SignInAnonymousRequestObject) (SignInAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(ctx context.Context, request SignInEmailPasswordRequestObject) (SignInEmailPasswordResponseObject, error)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(ctx context.Context, request SignInIdTokenRequestObject) (SignInIdTokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(ctx context.Context, request VerifySignInMfaTotpRequestObject) (VerifySignInMfaTotpResponseObject, error)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(ctx context.Context, request SignInOTPEmailRequestObject) (SignInOTPEmailResponseObject, error)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(ctx context.Context, request VerifySignInOTPEmailRequestObject) (VerifySignInOTPEmailResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(ctx context.Context, request SignInPasswordlessEmailRequestObject) (SignInPasswordlessEmailResponseObject, error)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(ctx context.Context, request SignInPasswordlessSmsRequestObject) (SignInPasswordlessSmsResponseObject, error)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(ctx context.Context, request VerifySignInPasswordlessSmsRequestObject) (VerifySignInPasswordlessSmsResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(ctx context.Context, request SignInPATRequestObject) (SignInPATResponseObject, error)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(ctx context.Context, request SignInProviderRequestObject) (SignInProviderResponseObject, error)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(ctx context.Context, request SignInProviderCallbackGetRequestObject) (SignInProviderCallbackGetResponseObject, error)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(ctx context.Context, request SignInProviderCallbackPostRequestObject) (SignInProviderCallbackPostResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(ctx context.Context, request SignInWebauthnRequestObject) (SignInWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(ctx context.Context, request VerifySignInWebauthnRequestObject) (VerifySignInWebauthnResponseObject, error)
	// Sign out
	// (POST /signout)
	SignOut(ctx context.Context, request SignOutRequestObject) (SignOutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(ctx context.Context, request SignUpEmailPasswordRequestObject) (SignUpEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(ctx context.Context, request SignUpWebauthnRequestObject) (SignUpWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(ctx context.Context, request VerifySignUpWebauthnRequestObject) (VerifySignUpWebauthnResponseObject, error)
	// Refresh access token
	// (POST /token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(ctx context.Context, request VerifyTokenRequestObject) (VerifyTokenResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(ctx context.Context, request DeanonymizeUserRequestObject) (DeanonymizeUserResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(ctx context.Context, request ChangeUserEmailRequestObject) (ChangeUserEmailResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(ctx context.Context, request SendVerificationEmailRequestObject) (SendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(ctx context.Context, request VerifyChangeUserMfaRequestObject) (VerifyChangeUserMfaResponseObject, error)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(ctx context.Context, request SendPasswordResetEmailRequestObject) (SendPasswordResetEmailResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(ctx context.Context, request AddSecurityKeyRequestObject) (AddSecurityKeyResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(ctx context.Context, request VerifyAddSecurityKeyRequestObject) (VerifyAddSecurityKeyResponseObject, error)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(ctx context.Context, request VerifyTicketRequestObject) (VerifyTicketResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetJWKs operation middleware
func (sh *strictHandler) GetJWKs(ctx *gin.Context) {
	var request GetJWKsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJWKs(ctx, request.(GetJWKsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJWKs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJWKsResponseObject); ok {
		if err := validResponse.VisitGetJWKsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ElevateWebauthn operation middleware
func (sh *strictHandler) ElevateWebauthn(ctx *gin.Context) {
	var request ElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ElevateWebauthn(ctx, request.(ElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyElevateWebauthn operation middleware
func (sh *strictHandler) VerifyElevateWebauthn(ctx *gin.Context) {
	var request VerifyElevateWebauthnRequestObject

	var body VerifyElevateWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyElevateWebauthn(ctx, request.(VerifyElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifyElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckGet operation middleware
func (sh *strictHandler) HealthCheckGet(ctx *gin.Context) {
	var request HealthCheckGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckGet(ctx, request.(HealthCheckGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckGetResponseObject); ok {
		if err := validResponse.VisitHealthCheckGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckHead operation middleware
func (sh *strictHandler) HealthCheckHead(ctx *gin.Context) {
	var request HealthCheckHeadRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckHead(ctx, request.(HealthCheckHeadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckHead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckHeadResponseObject); ok {
		if err := validResponse.VisitHealthCheckHeadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkIdToken operation middleware
func (sh *strictHandler) LinkIdToken(ctx *gin.Context) {
	var request LinkIdTokenRequestObject

	var body LinkIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkIdToken(ctx, request.(LinkIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LinkIdTokenResponseObject); ok {
		if err := validResponse.VisitLinkIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserMfa operation middleware
func (sh *strictHandler) ChangeUserMfa(ctx *gin.Context) {
	var request ChangeUserMfaRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserMfa(ctx, request.(ChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePAT operation middleware
func (sh *strictHandler) CreatePAT(ctx *gin.Context) {
	var request CreatePATRequestObject

	var body CreatePATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePAT(ctx, request.(CreatePATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePATResponseObject); ok {
		if err := validResponse.VisitCreatePATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInAnonymous operation middleware
func (sh *strictHandler) SignInAnonymous(ctx *gin.Context) {
	var request SignInAnonymousRequestObject

	var body SignInAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInAnonymous(ctx, request.(SignInAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInAnonymousResponseObject); ok {
		if err := validResponse.VisitSignInAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInEmailPassword operation middleware
func (sh *strictHandler) SignInEmailPassword(ctx *gin.Context) {
	var request SignInEmailPasswordRequestObject

	var body SignInEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInEmailPassword(ctx, request.(SignInEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignInEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInIdToken operation middleware
func (sh *strictHandler) SignInIdToken(ctx *gin.Context) {
	var request SignInIdTokenRequestObject

	var body SignInIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInIdToken(ctx, request.(SignInIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInIdTokenResponseObject); ok {
		if err := validResponse.VisitSignInIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInMfaTotp operation middleware
func (sh *strictHandler) VerifySignInMfaTotp(ctx *gin.Context) {
	var request VerifySignInMfaTotpRequestObject

	var body VerifySignInMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInMfaTotp(ctx, request.(VerifySignInMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInMfaTotpResponseObject); ok {
		if err := validResponse.VisitVerifySignInMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInOTPEmail operation middleware
func (sh *strictHandler) SignInOTPEmail(ctx *gin.Context) {
	var request SignInOTPEmailRequestObject

	var body SignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInOTPEmail(ctx, request.(SignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitSignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInOTPEmail operation middleware
func (sh *strictHandler) VerifySignInOTPEmail(ctx *gin.Context) {
	var request VerifySignInOTPEmailRequestObject

	var body VerifySignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInOTPEmail(ctx, request.(VerifySignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitVerifySignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessEmail operation middleware
func (sh *strictHandler) SignInPasswordlessEmail(ctx *gin.Context) {
	var request SignInPasswordlessEmailRequestObject

	var body SignInPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessEmail(ctx, request.(SignInPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessSms operation middleware
func (sh *strictHandler) SignInPasswordlessSms(ctx *gin.Context) {
	var request SignInPasswordlessSmsRequestObject

	var body SignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessSms(ctx, request.(SignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInPasswordlessSms operation middleware
func (sh *strictHandler) VerifySignInPasswordlessSms(ctx *gin.Context) {
	var request VerifySignInPasswordlessSmsRequestObject

	var body VerifySignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInPasswordlessSms(ctx, request.(VerifySignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitVerifySignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPAT operation middleware
func (sh *strictHandler) SignInPAT(ctx *gin.Context) {
	var request SignInPATRequestObject

	var body SignInPATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPAT(ctx, request.(SignInPATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPATResponseObject); ok {
		if err := validResponse.VisitSignInPATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProvider operation middleware
func (sh *strictHandler) SignInProvider(ctx *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams) {
	var request SignInProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProvider(ctx, request.(SignInProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderResponseObject); ok {
		if err := validResponse.VisitSignInProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackGet operation middleware
func (sh *strictHandler) SignInProviderCallbackGet(ctx *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams) {
	var request SignInProviderCallbackGetRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackGet(ctx, request.(SignInProviderCallbackGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackGetResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackPost operation middleware
func (sh *strictHandler) SignInProviderCallbackPost(ctx *gin.Context, provider SignInProviderCallbackPostParamsProvider) {
	var request SignInProviderCallbackPostRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SignInProviderCallbackPostFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackPost(ctx, request.(SignInProviderCallbackPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackPostResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInWebauthn operation middleware
func (sh *strictHandler) SignInWebauthn(ctx *gin.Context) {
	var request SignInWebauthnRequestObject

	var body SignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInWebauthn(ctx, request.(SignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInWebauthnResponseObject); ok {
		if err := validResponse.VisitSignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInWebauthn operation middleware
func (sh *strictHandler) VerifySignInWebauthn(ctx *gin.Context) {
	var request VerifySignInWebauthnRequestObject

	var body VerifySignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInWebauthn(ctx, request.(VerifySignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignOut operation middleware
func (sh *strictHandler) SignOut(ctx *gin.Context) {
	var request SignOutRequestObject

	var body SignOutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignOut(ctx, request.(SignOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignOutResponseObject); ok {
		if err := validResponse.VisitSignOutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpEmailPassword operation middleware
func (sh *strictHandler) SignUpEmailPassword(ctx *gin.Context) {
	var request SignUpEmailPasswordRequestObject

	var body SignUpEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpEmailPassword(ctx, request.(SignUpEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignUpEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpWebauthn operation middleware
func (sh *strictHandler) SignUpWebauthn(ctx *gin.Context) {
	var request SignUpWebauthnRequestObject

	var body SignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpWebauthn(ctx, request.(SignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitSignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignUpWebauthn operation middleware
func (sh *strictHandler) VerifySignUpWebauthn(ctx *gin.Context) {
	var request VerifySignUpWebauthnRequestObject

	var body VerifySignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignUpWebauthn(ctx, request.(VerifySignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyToken operation middleware
func (sh *strictHandler) VerifyToken(ctx *gin.Context) {
	var request VerifyTokenRequestObject

	var body VerifyTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyToken(ctx, request.(VerifyTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTokenResponseObject); ok {
		if err := validResponse.VisitVerifyTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeanonymizeUser operation middleware
func (sh *strictHandler) DeanonymizeUser(ctx *gin.Context) {
	var request DeanonymizeUserRequestObject

	var body DeanonymizeUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeanonymizeUser(ctx, request.(DeanonymizeUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeanonymizeUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeanonymizeUserResponseObject); ok {
		if err := validResponse.VisitDeanonymizeUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserEmail operation middleware
func (sh *strictHandler) ChangeUserEmail(ctx *gin.Context) {
	var request ChangeUserEmailRequestObject

	var body ChangeUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserEmail(ctx, request.(ChangeUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserEmailResponseObject); ok {
		if err := validResponse.VisitChangeUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendVerificationEmail operation middleware
func (sh *strictHandler) SendVerificationEmail(ctx *gin.Context) {
	var request SendVerificationEmailRequestObject

	var body SendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendVerificationEmail(ctx, request.(SendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyChangeUserMfa operation middleware
func (sh *strictHandler) VerifyChangeUserMfa(ctx *gin.Context) {
	var request VerifyChangeUserMfaRequestObject

	var body VerifyChangeUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyChangeUserMfa(ctx, request.(VerifyChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitVerifyChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context) {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendPasswordResetEmail operation middleware
func (sh *strictHandler) SendPasswordResetEmail(ctx *gin.Context) {
	var request SendPasswordResetEmailRequestObject

	var body SendPasswordResetEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendPasswordResetEmail(ctx, request.(SendPasswordResetEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendPasswordResetEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendPasswordResetEmailResponseObject); ok {
		if err := validResponse.VisitSendPasswordResetEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSecurityKey operation middleware
func (sh *strictHandler) AddSecurityKey(ctx *gin.Context) {
	var request AddSecurityKeyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddSecurityKey(ctx, request.(AddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAddSecurityKey operation middleware
func (sh *strictHandler) VerifyAddSecurityKey(ctx *gin.Context) {
	var request VerifyAddSecurityKeyRequestObject

	var body VerifyAddSecurityKeyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAddSecurityKey(ctx, request.(VerifyAddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyAddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitVerifyAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyTicket operation middleware
func (sh *strictHandler) VerifyTicket(ctx *gin.Context, params VerifyTicketParams) {
	var request VerifyTicketRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyTicket(ctx, request.(VerifyTicketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyTicket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTicketResponseObject); ok {
		if err := validResponse.VisitVerifyTicketResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lF74AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
