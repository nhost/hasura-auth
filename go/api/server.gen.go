// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYX2/bOBL/KgR7h3uxLNfx9Ro/XXYRYFN006B2dh+aPIzFkcWuSKqckR0j6+++ICXb",
	"cqy0CFAUi32zyZnh/PnNj0M9ysyZylm0THL6KCkr0ED8eem98x+RKmcJwwIopVk7C+WNdxV61khymkNJ",
	"OJBVZ+lRYtANPxRS5nUV1OS0MSkyp1BwASy0Qss610iCCxRQVaXOIAiLxsJAoq2NnH6S2jJ6C2VC6Ffo",
	"k92+tisotUo8fqmRWA4k6aWtq0RpgkWJKtgwoMsESo+gNom2SU0oB7ICorXzKmHnEiqc5+6itkmhF1Wi",
	"gGEBUcG7EhPrOIGydOtounQZnCwqzKEuOYnypiZOFhjstRJxnYI9VNpjNndH+vcDyZsK5VQSe22XcjuQ",
	"BolgiacZ/aU2YEXuNVpVbpqsiZ10jyFi4Jp67MznN6LZbI2EKh0shPQv0cvtNrj9pdYeVShLa+/g4aCt",
	"/SEKt/iMGYfDZ0gUj3sRliDLkGju/sCoeRJSZ//yodIe6SoK5s4b4Mb3N5OeUEIkuUcq9raPc/Kx2RUc",
	"toWqw4ECai4CaFuYOi/WBVrRWgoSAcnvfp+HTDyAqcpw5jg7++/iTX6WZJPFeTJ5i2fJ+f/eQqImapS/",
	"VpMxjicRfBxQLqfy7m7xaZScQ5LfP77d3t0tkv3fyfbZ312t1+Og1oeBmjD25r885nIqX6UHCkjb/k9v",
	"qafY3Uo8k/cnOf0KCm5gUzpQLwQDHSD0Nfd3SAsRnDqgl/a2ugykcNN2+yzqvZTkgoVT2FyIyEii2e6i",
	"4LMr7JCM5uL/tnDEQ+3k4IDTncJJwVw0Td8MOsb1oRXeHrisz8fdnnC5MNpqUxtxJrICPGSMno4cn7Ef",
	"2WVM1qvAjeeTP/8del7b92iXXMjp2YnbT7CzC27v0/2zlflwCPclNNHQ58fIraE6O+8/SRNoKaL+fiA1",
	"o6FeImkXwHvYhP8tjQeLRwYbUz11UpqqEjbXYJ4ovHOFFbNQ+D615g7pKxKvXXIoiWgFu5WJnWjgYVeH",
	"8VFVxr1XCUO4055PL/saO2c8ylx74iaqGEq492C/0sTV12jt/cZzd5yOgrmiaZqaTQJVNcycSTPgrEh2",
	"CiH+PkCdnHDbUtlLcLICBn/ry14MZB6BUV3w0Q2igDFhbXqv1B8Fkx9GN3HjN/RhMFOdLC2cKxFsENE9",
	"nHIVuSTcfm3gf9PrT9OFdXZjXE39wf1j+7EqnMXr2iyapjlxpbP/9fL770WyTy6JQ/cdd8mg07X7+gz2",
	"CO5W9LgfO+kNAwvrFf6awzz48BTnx+npT8Yu8tO7K0SibR6JLnOWIePOiCCprirnuduHtqnWdVj5D4lZ",
	"IxFyGKhpz5F7jcg0XTjO0K90hoKduDgMpSGwUmfYvtnaUy4qyAoU4+Ho5ID1ej2EuD10fpm2upS+v/r5",
	"8np2mYyHo2HBpozFQ2/oQ96e3BqZpimtYblEP9QujSJp6DvN5T7A6KEcyBX6ZnyTr4ej4agZbtBCpeVU",
	"nsWlSANFBE/aPOXS5v3WnWYqRzG/oUniIH6l5FTeOOJZVDka7mQDMiT+yanNrkJoo4XOmzP9TM1kSftp",
	"8NvjVt8YuT3GdejfuNA8pWNo49Ho+zlyPFDH059ApY6zel6X5UZ4XGpi9KiG4rouS9HO1MIgWGruEbGK",
	"kG8fOZpEhVa1HTwZnX0314+/MfR5HsspDGYFWE0m+LJ/2Udnzn+cM2HaEGvNhVjqFdo2Ve13BYEPmpgi",
	"p1FtDPjNwf+o1IpbtR++Q5vAkuJDOgoePlZYdQD8/Xa73f4VAAD//y11NsWqEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
