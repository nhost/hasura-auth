// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(c *gin.Context)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(c *gin.Context)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(c *gin.Context)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(c *gin.Context)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(c *gin.Context)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(c *gin.Context)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(c *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(c *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(c *gin.Context, provider SignInProviderCallbackPostParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(c *gin.Context)
	// Sign out
	// (POST /signout)
	SignOut(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(c *gin.Context)
	// Refresh access token
	// (POST /token)
	RefreshToken(c *gin.Context)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(c *gin.Context)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(c *gin.Context)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(c *gin.Context)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(c *gin.Context)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(c *gin.Context, params VerifyTicketParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetJWKs operation middleware
func (siw *ServerInterfaceWrapper) GetJWKs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKs(c)
}

// ElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) ElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ElevateWebauthn(c)
}

// VerifyElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifyElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyElevateWebauthn(c)
}

// HealthCheckGet operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckGet(c)
}

// HealthCheckHead operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckHead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckHead(c)
}

// LinkIdToken operation middleware
func (siw *ServerInterfaceWrapper) LinkIdToken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LinkIdToken(c)
}

// ChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserMfa(c)
}

// CreatePAT operation middleware
func (siw *ServerInterfaceWrapper) CreatePAT(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePAT(c)
}

// SignInAnonymous operation middleware
func (siw *ServerInterfaceWrapper) SignInAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInAnonymous(c)
}

// SignInEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignInEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInEmailPassword(c)
}

// SignInIdToken operation middleware
func (siw *ServerInterfaceWrapper) SignInIdToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInIdToken(c)
}

// VerifySignInMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInMfaTotp(c)
}

// SignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInOTPEmail(c)
}

// VerifySignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInOTPEmail(c)
}

// SignInPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessEmail(c)
}

// SignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessSms(c)
}

// VerifySignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInPasswordlessSms(c)
}

// SignInPAT operation middleware
func (siw *ServerInterfaceWrapper) SignInPAT(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPAT(c)
}

// SignInProvider operation middleware
func (siw *ServerInterfaceWrapper) SignInProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", false, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", c.Request.URL.Query(), &params.Metadata)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter metadata: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProvider(c, provider, params)
}

// SignInProviderCallbackGet operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackGetParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderCallbackGetParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackGet(c, provider, params)
}

// SignInProviderCallbackPost operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackPostParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackPost(c, provider)
}

// SignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInWebauthn(c)
}

// VerifySignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInWebauthn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUpEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignUpEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpEmailPassword(c)
}

// SignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpWebauthn(c)
}

// VerifySignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignUpWebauthn(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// VerifyToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyToken(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// DeanonymizeUser operation middleware
func (siw *ServerInterfaceWrapper) DeanonymizeUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeanonymizeUser(c)
}

// ChangeUserEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserEmail(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserEmail(c)
}

// SendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendVerificationEmail(c)
}

// VerifyChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) VerifyChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyChangeUserMfa(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c)
}

// SendPasswordResetEmail operation middleware
func (siw *ServerInterfaceWrapper) SendPasswordResetEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendPasswordResetEmail(c)
}

// AddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) AddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddSecurityKey(c)
}

// VerifyAddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) VerifyAddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyAddSecurityKey(c)
}

// VerifyTicket operation middleware
func (siw *ServerInterfaceWrapper) VerifyTicket(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyTicketParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyTicket(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKs)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.ElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.VerifyElevateWebauthn)
	router.GET(options.BaseURL+"/healthz", wrapper.HealthCheckGet)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HealthCheckHead)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.LinkIdToken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.ChangeUserMfa)
	router.POST(options.BaseURL+"/pat", wrapper.CreatePAT)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.SignInAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.SignInEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.SignInIdToken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.VerifySignInMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.SignInOTPEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.VerifySignInOTPEmail)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.SignInPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.SignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.VerifySignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/pat", wrapper.SignInPAT)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.SignInProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackGet)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackPost)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.SignInWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.VerifySignInWebauthn)
	router.POST(options.BaseURL+"/signout", wrapper.SignOut)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.SignUpEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.SignUpWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.VerifySignUpWebauthn)
	router.POST(options.BaseURL+"/token", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.VerifyToken)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.DeanonymizeUser)
	router.POST(options.BaseURL+"/user/email/change", wrapper.ChangeUserEmail)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.SendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.VerifyChangeUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.SendPasswordResetEmail)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.AddSecurityKey)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.VerifyAddSecurityKey)
	router.GET(options.BaseURL+"/verify", wrapper.VerifyTicket)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetJWKsRequestObject struct {
}

type GetJWKsResponseObject interface {
	VisitGetJWKsResponse(w http.ResponseWriter) error
}

type GetJWKs200JSONResponse JWKSet

func (response GetJWKs200JSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJWKsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJWKsdefaultJSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ElevateWebauthnRequestObject struct {
}

type ElevateWebauthnResponseObject interface {
	VisitElevateWebauthnResponse(w http.ResponseWriter) error
}

type ElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response ElevateWebauthn200JSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ElevateWebauthndefaultJSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyElevateWebauthnRequestObject struct {
	Body *VerifyElevateWebauthnJSONRequestBody
}

type VerifyElevateWebauthnResponseObject interface {
	VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error
}

type VerifyElevateWebauthn200JSONResponse SessionPayload

func (response VerifyElevateWebauthn200JSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyElevateWebauthndefaultJSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckGetRequestObject struct {
}

type HealthCheckGetResponseObject interface {
	VisitHealthCheckGetResponse(w http.ResponseWriter) error
}

type HealthCheckGet200JSONResponse OKResponse

func (response HealthCheckGet200JSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckGetdefaultJSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckHeadRequestObject struct {
}

type HealthCheckHeadResponseObject interface {
	VisitHealthCheckHeadResponse(w http.ResponseWriter) error
}

type HealthCheckHead200Response struct {
}

func (response HealthCheckHead200Response) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheckHeaddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckHeaddefaultJSONResponse) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkIdTokenRequestObject struct {
	Body *LinkIdTokenJSONRequestBody
}

type LinkIdTokenResponseObject interface {
	VisitLinkIdTokenResponse(w http.ResponseWriter) error
}

type LinkIdToken200JSONResponse OKResponse

func (response LinkIdToken200JSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response LinkIdTokendefaultJSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserMfaRequestObject struct {
}

type ChangeUserMfaResponseObject interface {
	VisitChangeUserMfaResponse(w http.ResponseWriter) error
}

type ChangeUserMfa200JSONResponse TotpGenerateResponse

func (response ChangeUserMfa200JSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserMfadefaultJSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePATRequestObject struct {
	Body *CreatePATJSONRequestBody
}

type CreatePATResponseObject interface {
	VisitCreatePATResponse(w http.ResponseWriter) error
}

type CreatePAT200JSONResponse CreatePATResponse

func (response CreatePAT200JSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response CreatePATdefaultJSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInAnonymousRequestObject struct {
	Body *SignInAnonymousJSONRequestBody
}

type SignInAnonymousResponseObject interface {
	VisitSignInAnonymousResponse(w http.ResponseWriter) error
}

type SignInAnonymous200JSONResponse SessionPayload

func (response SignInAnonymous200JSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInAnonymousdefaultJSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInEmailPasswordRequestObject struct {
	Body *SignInEmailPasswordJSONRequestBody
}

type SignInEmailPasswordResponseObject interface {
	VisitSignInEmailPasswordResponse(w http.ResponseWriter) error
}

type SignInEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response SignInEmailPassword200JSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInEmailPassworddefaultJSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInIdTokenRequestObject struct {
	Body *SignInIdTokenJSONRequestBody
}

type SignInIdTokenResponseObject interface {
	VisitSignInIdTokenResponse(w http.ResponseWriter) error
}

type SignInIdToken200JSONResponse SessionPayload

func (response SignInIdToken200JSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInIdTokendefaultJSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInMfaTotpRequestObject struct {
	Body *VerifySignInMfaTotpJSONRequestBody
}

type VerifySignInMfaTotpResponseObject interface {
	VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error
}

type VerifySignInMfaTotp200JSONResponse SessionPayload

func (response VerifySignInMfaTotp200JSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInMfaTotpdefaultJSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInOTPEmailRequestObject struct {
	Body *SignInOTPEmailJSONRequestBody
}

type SignInOTPEmailResponseObject interface {
	VisitSignInOTPEmailResponse(w http.ResponseWriter) error
}

type SignInOTPEmail200JSONResponse OKResponse

func (response SignInOTPEmail200JSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInOTPEmaildefaultJSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInOTPEmailRequestObject struct {
	Body *VerifySignInOTPEmailJSONRequestBody
}

type VerifySignInOTPEmailResponseObject interface {
	VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error
}

type VerifySignInOTPEmail200JSONResponse SignInOTPEmailVerifyResponse

func (response VerifySignInOTPEmail200JSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInOTPEmaildefaultJSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessEmailRequestObject struct {
	Body *SignInPasswordlessEmailJSONRequestBody
}

type SignInPasswordlessEmailResponseObject interface {
	VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error
}

type SignInPasswordlessEmail200JSONResponse OKResponse

func (response SignInPasswordlessEmail200JSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessEmaildefaultJSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessSmsRequestObject struct {
	Body *SignInPasswordlessSmsJSONRequestBody
}

type SignInPasswordlessSmsResponseObject interface {
	VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type SignInPasswordlessSms200JSONResponse OKResponse

func (response SignInPasswordlessSms200JSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessSmsdefaultJSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInPasswordlessSmsRequestObject struct {
	Body *VerifySignInPasswordlessSmsJSONRequestBody
}

type VerifySignInPasswordlessSmsResponseObject interface {
	VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type VerifySignInPasswordlessSms200JSONResponse SignInPasswordlessSmsOtpResponse

func (response VerifySignInPasswordlessSms200JSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInPasswordlessSmsdefaultJSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPATRequestObject struct {
	Body *SignInPATJSONRequestBody
}

type SignInPATResponseObject interface {
	VisitSignInPATResponse(w http.ResponseWriter) error
}

type SignInPAT200JSONResponse SessionPayload

func (response SignInPAT200JSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPATdefaultJSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderRequestObject struct {
	Provider SignInProviderParamsProvider `json:"provider"`
	Params   SignInProviderParams
}

type SignInProviderResponseObject interface {
	VisitSignInProviderResponse(w http.ResponseWriter) error
}

type SignInProvider302ResponseHeaders struct {
	Location string
}

type SignInProvider302Response struct {
	Headers SignInProvider302ResponseHeaders
}

func (response SignInProvider302Response) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderdefaultJSONResponse) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackGetRequestObject struct {
	Provider SignInProviderCallbackGetParamsProvider `json:"provider"`
	Params   SignInProviderCallbackGetParams
}

type SignInProviderCallbackGetResponseObject interface {
	VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackGet302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackGet302Response struct {
	Headers SignInProviderCallbackGet302ResponseHeaders
}

func (response SignInProviderCallbackGet302Response) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackGetdefaultJSONResponse) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackPostRequestObject struct {
	Provider SignInProviderCallbackPostParamsProvider `json:"provider"`
	Body     *SignInProviderCallbackPostFormdataRequestBody
}

type SignInProviderCallbackPostResponseObject interface {
	VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackPost302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackPost302Response struct {
	Headers SignInProviderCallbackPost302ResponseHeaders
}

func (response SignInProviderCallbackPost302Response) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackPostdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackPostdefaultJSONResponse) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInWebauthnRequestObject struct {
	Body *SignInWebauthnJSONRequestBody
}

type SignInWebauthnResponseObject interface {
	VisitSignInWebauthnResponse(w http.ResponseWriter) error
}

type SignInWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response SignInWebauthn200JSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInWebauthndefaultJSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInWebauthnRequestObject struct {
	Body *VerifySignInWebauthnJSONRequestBody
}

type VerifySignInWebauthnResponseObject interface {
	VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignInWebauthn200JSONResponse SessionPayload

func (response VerifySignInWebauthn200JSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInWebauthndefaultJSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignOutRequestObject struct {
	Body *SignOutJSONRequestBody
}

type SignOutResponseObject interface {
	VisitSignOutResponse(w http.ResponseWriter) error
}

type SignOut200JSONResponse OKResponse

func (response SignOut200JSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignOutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignOutdefaultJSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpEmailPasswordRequestObject struct {
	Body *SignUpEmailPasswordJSONRequestBody
}

type SignUpEmailPasswordResponseObject interface {
	VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error
}

type SignUpEmailPassword200JSONResponse SessionPayload

func (response SignUpEmailPassword200JSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpEmailPassworddefaultJSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpWebauthnRequestObject struct {
	Body *SignUpWebauthnJSONRequestBody
}

type SignUpWebauthnResponseObject interface {
	VisitSignUpWebauthnResponse(w http.ResponseWriter) error
}

type SignUpWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response SignUpWebauthn200JSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpWebauthndefaultJSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignUpWebauthnRequestObject struct {
	Body *VerifySignUpWebauthnJSONRequestBody
}

type VerifySignUpWebauthnResponseObject interface {
	VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignUpWebauthn200JSONResponse SessionPayload

func (response VerifySignUpWebauthn200JSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignUpWebauthndefaultJSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse Session

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTokenRequestObject struct {
	Body *VerifyTokenJSONRequestBody
}

type VerifyTokenResponseObject interface {
	VisitVerifyTokenResponse(w http.ResponseWriter) error
}

type VerifyToken200JSONResponse string

func (response VerifyToken200JSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTokendefaultJSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeanonymizeUserRequestObject struct {
	Body *DeanonymizeUserJSONRequestBody
}

type DeanonymizeUserResponseObject interface {
	VisitDeanonymizeUserResponse(w http.ResponseWriter) error
}

type DeanonymizeUser200JSONResponse OKResponse

func (response DeanonymizeUser200JSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeanonymizeUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeanonymizeUserdefaultJSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserEmailRequestObject struct {
	Body *ChangeUserEmailJSONRequestBody
}

type ChangeUserEmailResponseObject interface {
	VisitChangeUserEmailResponse(w http.ResponseWriter) error
}

type ChangeUserEmail200JSONResponse OKResponse

func (response ChangeUserEmail200JSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserEmaildefaultJSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendVerificationEmailRequestObject struct {
	Body *SendVerificationEmailJSONRequestBody
}

type SendVerificationEmailResponseObject interface {
	VisitSendVerificationEmailResponse(w http.ResponseWriter) error
}

type SendVerificationEmail200JSONResponse OKResponse

func (response SendVerificationEmail200JSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendVerificationEmaildefaultJSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyChangeUserMfaRequestObject struct {
	Body *VerifyChangeUserMfaJSONRequestBody
}

type VerifyChangeUserMfaResponseObject interface {
	VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error
}

type VerifyChangeUserMfa200JSONResponse OKResponse

func (response VerifyChangeUserMfa200JSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyChangeUserMfadefaultJSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200JSONResponse OKResponse

func (response ChangeUserPassword200JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendPasswordResetEmailRequestObject struct {
	Body *SendPasswordResetEmailJSONRequestBody
}

type SendPasswordResetEmailResponseObject interface {
	VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error
}

type SendPasswordResetEmail200JSONResponse OKResponse

func (response SendPasswordResetEmail200JSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendPasswordResetEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendPasswordResetEmaildefaultJSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddSecurityKeyRequestObject struct {
}

type AddSecurityKeyResponseObject interface {
	VisitAddSecurityKeyResponse(w http.ResponseWriter) error
}

type AddSecurityKey200JSONResponse PublicKeyCredentialCreationOptions

func (response AddSecurityKey200JSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response AddSecurityKeydefaultJSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAddSecurityKeyRequestObject struct {
	Body *VerifyAddSecurityKeyJSONRequestBody
}

type VerifyAddSecurityKeyResponseObject interface {
	VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error
}

type VerifyAddSecurityKey200JSONResponse VerifyAddSecurityKeyResponse

func (response VerifyAddSecurityKey200JSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyAddSecurityKeydefaultJSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTicketRequestObject struct {
	Params VerifyTicketParams
}

type VerifyTicketResponseObject interface {
	VisitVerifyTicketResponse(w http.ResponseWriter) error
}

type VerifyTicket302ResponseHeaders struct {
	Location string
}

type VerifyTicket302Response struct {
	Headers VerifyTicket302ResponseHeaders
}

func (response VerifyTicket302Response) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type VerifyTicketdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTicketdefaultJSONResponse) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(ctx context.Context, request GetJWKsRequestObject) (GetJWKsResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(ctx context.Context, request ElevateWebauthnRequestObject) (ElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(ctx context.Context, request VerifyElevateWebauthnRequestObject) (VerifyElevateWebauthnResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(ctx context.Context, request HealthCheckGetRequestObject) (HealthCheckGetResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(ctx context.Context, request HealthCheckHeadRequestObject) (HealthCheckHeadResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(ctx context.Context, request LinkIdTokenRequestObject) (LinkIdTokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(ctx context.Context, request ChangeUserMfaRequestObject) (ChangeUserMfaResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(ctx context.Context, request CreatePATRequestObject) (CreatePATResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(ctx context.Context, request SignInAnonymousRequestObject) (SignInAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(ctx context.Context, request SignInEmailPasswordRequestObject) (SignInEmailPasswordResponseObject, error)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(ctx context.Context, request SignInIdTokenRequestObject) (SignInIdTokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(ctx context.Context, request VerifySignInMfaTotpRequestObject) (VerifySignInMfaTotpResponseObject, error)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(ctx context.Context, request SignInOTPEmailRequestObject) (SignInOTPEmailResponseObject, error)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(ctx context.Context, request VerifySignInOTPEmailRequestObject) (VerifySignInOTPEmailResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(ctx context.Context, request SignInPasswordlessEmailRequestObject) (SignInPasswordlessEmailResponseObject, error)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(ctx context.Context, request SignInPasswordlessSmsRequestObject) (SignInPasswordlessSmsResponseObject, error)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(ctx context.Context, request VerifySignInPasswordlessSmsRequestObject) (VerifySignInPasswordlessSmsResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(ctx context.Context, request SignInPATRequestObject) (SignInPATResponseObject, error)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(ctx context.Context, request SignInProviderRequestObject) (SignInProviderResponseObject, error)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(ctx context.Context, request SignInProviderCallbackGetRequestObject) (SignInProviderCallbackGetResponseObject, error)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(ctx context.Context, request SignInProviderCallbackPostRequestObject) (SignInProviderCallbackPostResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(ctx context.Context, request SignInWebauthnRequestObject) (SignInWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(ctx context.Context, request VerifySignInWebauthnRequestObject) (VerifySignInWebauthnResponseObject, error)
	// Sign out
	// (POST /signout)
	SignOut(ctx context.Context, request SignOutRequestObject) (SignOutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(ctx context.Context, request SignUpEmailPasswordRequestObject) (SignUpEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(ctx context.Context, request SignUpWebauthnRequestObject) (SignUpWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(ctx context.Context, request VerifySignUpWebauthnRequestObject) (VerifySignUpWebauthnResponseObject, error)
	// Refresh access token
	// (POST /token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(ctx context.Context, request VerifyTokenRequestObject) (VerifyTokenResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(ctx context.Context, request DeanonymizeUserRequestObject) (DeanonymizeUserResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(ctx context.Context, request ChangeUserEmailRequestObject) (ChangeUserEmailResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(ctx context.Context, request SendVerificationEmailRequestObject) (SendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(ctx context.Context, request VerifyChangeUserMfaRequestObject) (VerifyChangeUserMfaResponseObject, error)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(ctx context.Context, request SendPasswordResetEmailRequestObject) (SendPasswordResetEmailResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(ctx context.Context, request AddSecurityKeyRequestObject) (AddSecurityKeyResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(ctx context.Context, request VerifyAddSecurityKeyRequestObject) (VerifyAddSecurityKeyResponseObject, error)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(ctx context.Context, request VerifyTicketRequestObject) (VerifyTicketResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetJWKs operation middleware
func (sh *strictHandler) GetJWKs(ctx *gin.Context) {
	var request GetJWKsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJWKs(ctx, request.(GetJWKsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJWKs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJWKsResponseObject); ok {
		if err := validResponse.VisitGetJWKsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ElevateWebauthn operation middleware
func (sh *strictHandler) ElevateWebauthn(ctx *gin.Context) {
	var request ElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ElevateWebauthn(ctx, request.(ElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyElevateWebauthn operation middleware
func (sh *strictHandler) VerifyElevateWebauthn(ctx *gin.Context) {
	var request VerifyElevateWebauthnRequestObject

	var body VerifyElevateWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyElevateWebauthn(ctx, request.(VerifyElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifyElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckGet operation middleware
func (sh *strictHandler) HealthCheckGet(ctx *gin.Context) {
	var request HealthCheckGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckGet(ctx, request.(HealthCheckGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckGetResponseObject); ok {
		if err := validResponse.VisitHealthCheckGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckHead operation middleware
func (sh *strictHandler) HealthCheckHead(ctx *gin.Context) {
	var request HealthCheckHeadRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckHead(ctx, request.(HealthCheckHeadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckHead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckHeadResponseObject); ok {
		if err := validResponse.VisitHealthCheckHeadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkIdToken operation middleware
func (sh *strictHandler) LinkIdToken(ctx *gin.Context) {
	var request LinkIdTokenRequestObject

	var body LinkIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkIdToken(ctx, request.(LinkIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LinkIdTokenResponseObject); ok {
		if err := validResponse.VisitLinkIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserMfa operation middleware
func (sh *strictHandler) ChangeUserMfa(ctx *gin.Context) {
	var request ChangeUserMfaRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserMfa(ctx, request.(ChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePAT operation middleware
func (sh *strictHandler) CreatePAT(ctx *gin.Context) {
	var request CreatePATRequestObject

	var body CreatePATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePAT(ctx, request.(CreatePATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePATResponseObject); ok {
		if err := validResponse.VisitCreatePATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInAnonymous operation middleware
func (sh *strictHandler) SignInAnonymous(ctx *gin.Context) {
	var request SignInAnonymousRequestObject

	var body SignInAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInAnonymous(ctx, request.(SignInAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInAnonymousResponseObject); ok {
		if err := validResponse.VisitSignInAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInEmailPassword operation middleware
func (sh *strictHandler) SignInEmailPassword(ctx *gin.Context) {
	var request SignInEmailPasswordRequestObject

	var body SignInEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInEmailPassword(ctx, request.(SignInEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignInEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInIdToken operation middleware
func (sh *strictHandler) SignInIdToken(ctx *gin.Context) {
	var request SignInIdTokenRequestObject

	var body SignInIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInIdToken(ctx, request.(SignInIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInIdTokenResponseObject); ok {
		if err := validResponse.VisitSignInIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInMfaTotp operation middleware
func (sh *strictHandler) VerifySignInMfaTotp(ctx *gin.Context) {
	var request VerifySignInMfaTotpRequestObject

	var body VerifySignInMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInMfaTotp(ctx, request.(VerifySignInMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInMfaTotpResponseObject); ok {
		if err := validResponse.VisitVerifySignInMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInOTPEmail operation middleware
func (sh *strictHandler) SignInOTPEmail(ctx *gin.Context) {
	var request SignInOTPEmailRequestObject

	var body SignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInOTPEmail(ctx, request.(SignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitSignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInOTPEmail operation middleware
func (sh *strictHandler) VerifySignInOTPEmail(ctx *gin.Context) {
	var request VerifySignInOTPEmailRequestObject

	var body VerifySignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInOTPEmail(ctx, request.(VerifySignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitVerifySignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessEmail operation middleware
func (sh *strictHandler) SignInPasswordlessEmail(ctx *gin.Context) {
	var request SignInPasswordlessEmailRequestObject

	var body SignInPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessEmail(ctx, request.(SignInPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessSms operation middleware
func (sh *strictHandler) SignInPasswordlessSms(ctx *gin.Context) {
	var request SignInPasswordlessSmsRequestObject

	var body SignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessSms(ctx, request.(SignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInPasswordlessSms operation middleware
func (sh *strictHandler) VerifySignInPasswordlessSms(ctx *gin.Context) {
	var request VerifySignInPasswordlessSmsRequestObject

	var body VerifySignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInPasswordlessSms(ctx, request.(VerifySignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitVerifySignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPAT operation middleware
func (sh *strictHandler) SignInPAT(ctx *gin.Context) {
	var request SignInPATRequestObject

	var body SignInPATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPAT(ctx, request.(SignInPATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPATResponseObject); ok {
		if err := validResponse.VisitSignInPATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProvider operation middleware
func (sh *strictHandler) SignInProvider(ctx *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams) {
	var request SignInProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProvider(ctx, request.(SignInProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderResponseObject); ok {
		if err := validResponse.VisitSignInProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackGet operation middleware
func (sh *strictHandler) SignInProviderCallbackGet(ctx *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams) {
	var request SignInProviderCallbackGetRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackGet(ctx, request.(SignInProviderCallbackGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackGetResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackPost operation middleware
func (sh *strictHandler) SignInProviderCallbackPost(ctx *gin.Context, provider SignInProviderCallbackPostParamsProvider) {
	var request SignInProviderCallbackPostRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SignInProviderCallbackPostFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackPost(ctx, request.(SignInProviderCallbackPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackPostResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInWebauthn operation middleware
func (sh *strictHandler) SignInWebauthn(ctx *gin.Context) {
	var request SignInWebauthnRequestObject

	var body SignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInWebauthn(ctx, request.(SignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInWebauthnResponseObject); ok {
		if err := validResponse.VisitSignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInWebauthn operation middleware
func (sh *strictHandler) VerifySignInWebauthn(ctx *gin.Context) {
	var request VerifySignInWebauthnRequestObject

	var body VerifySignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInWebauthn(ctx, request.(VerifySignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignOut operation middleware
func (sh *strictHandler) SignOut(ctx *gin.Context) {
	var request SignOutRequestObject

	var body SignOutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignOut(ctx, request.(SignOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignOutResponseObject); ok {
		if err := validResponse.VisitSignOutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpEmailPassword operation middleware
func (sh *strictHandler) SignUpEmailPassword(ctx *gin.Context) {
	var request SignUpEmailPasswordRequestObject

	var body SignUpEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpEmailPassword(ctx, request.(SignUpEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignUpEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpWebauthn operation middleware
func (sh *strictHandler) SignUpWebauthn(ctx *gin.Context) {
	var request SignUpWebauthnRequestObject

	var body SignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpWebauthn(ctx, request.(SignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitSignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignUpWebauthn operation middleware
func (sh *strictHandler) VerifySignUpWebauthn(ctx *gin.Context) {
	var request VerifySignUpWebauthnRequestObject

	var body VerifySignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignUpWebauthn(ctx, request.(VerifySignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyToken operation middleware
func (sh *strictHandler) VerifyToken(ctx *gin.Context) {
	var request VerifyTokenRequestObject

	var body VerifyTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyToken(ctx, request.(VerifyTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTokenResponseObject); ok {
		if err := validResponse.VisitVerifyTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeanonymizeUser operation middleware
func (sh *strictHandler) DeanonymizeUser(ctx *gin.Context) {
	var request DeanonymizeUserRequestObject

	var body DeanonymizeUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeanonymizeUser(ctx, request.(DeanonymizeUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeanonymizeUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeanonymizeUserResponseObject); ok {
		if err := validResponse.VisitDeanonymizeUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserEmail operation middleware
func (sh *strictHandler) ChangeUserEmail(ctx *gin.Context) {
	var request ChangeUserEmailRequestObject

	var body ChangeUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserEmail(ctx, request.(ChangeUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserEmailResponseObject); ok {
		if err := validResponse.VisitChangeUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendVerificationEmail operation middleware
func (sh *strictHandler) SendVerificationEmail(ctx *gin.Context) {
	var request SendVerificationEmailRequestObject

	var body SendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendVerificationEmail(ctx, request.(SendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyChangeUserMfa operation middleware
func (sh *strictHandler) VerifyChangeUserMfa(ctx *gin.Context) {
	var request VerifyChangeUserMfaRequestObject

	var body VerifyChangeUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyChangeUserMfa(ctx, request.(VerifyChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitVerifyChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context) {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendPasswordResetEmail operation middleware
func (sh *strictHandler) SendPasswordResetEmail(ctx *gin.Context) {
	var request SendPasswordResetEmailRequestObject

	var body SendPasswordResetEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendPasswordResetEmail(ctx, request.(SendPasswordResetEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendPasswordResetEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendPasswordResetEmailResponseObject); ok {
		if err := validResponse.VisitSendPasswordResetEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSecurityKey operation middleware
func (sh *strictHandler) AddSecurityKey(ctx *gin.Context) {
	var request AddSecurityKeyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddSecurityKey(ctx, request.(AddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAddSecurityKey operation middleware
func (sh *strictHandler) VerifyAddSecurityKey(ctx *gin.Context) {
	var request VerifyAddSecurityKeyRequestObject

	var body VerifyAddSecurityKeyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAddSecurityKey(ctx, request.(VerifyAddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyAddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitVerifyAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyTicket operation middleware
func (sh *strictHandler) VerifyTicket(ctx *gin.Context, params VerifyTicketParams) {
	var request VerifyTicketRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyTicket(ctx, request.(VerifyTicketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyTicket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTicketResponseObject); ok {
		if err := validResponse.VisitVerifyTicketResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
