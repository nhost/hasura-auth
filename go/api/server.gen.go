// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetWellKnownJwksJson(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	PostElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	PostElevateWebauthnVerify(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	GetHealthz(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HeadHealthz(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	PostLinkIdtoken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	GetMfaTotpGenerate(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	PostPat(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	PostSigninAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(c *gin.Context)
	// Sign in with in an id token
	// (POST /signin/idtoken)
	PostSigninIdtoken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	PostSigninMfaTotp(c *gin.Context)
	// Sign in with a one time password sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/otp/email)
	PostSigninOtpEmail(c *gin.Context)
	// Verify OTP and return a session if validation is successful
	// (POST /signin/otp/email/verify)
	PostSigninOtpEmailVerify(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(c *gin.Context)
	// Sign in with a one time password sent to user's phone number. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/sms)
	PostSigninPasswordlessSms(c *gin.Context)
	// Verify SMS OTP and return a session if validation is successful
	// (POST /signin/passwordless/sms/otp)
	PostSigninPasswordlessSmsOtp(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	PostSigninPat(c *gin.Context)
	// Sign in with an oauth2 provider
	// (GET /signin/provider/{provider})
	GetSigninProviderProvider(c *gin.Context, provider GetSigninProviderProviderParamsProvider, params GetSigninProviderProviderParams)
	// Callback for oauth2 provider
	// (GET /signin/provider/{provider}/callback)
	GetSigninProviderProviderCallback(c *gin.Context, provider GetSigninProviderProviderCallbackParamsProvider, params GetSigninProviderProviderCallbackParams)
	// Callback for oauth2 provider using form_post response mode
	// (POST /signin/provider/{provider}/callback)
	PostSigninProviderProviderCallback(c *gin.Context, provider PostSigninProviderProviderCallbackParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	PostSigninWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	PostSigninWebauthnVerify(c *gin.Context)
	// Sign out
	// (POST /signout)
	PostSignout(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	PostSignupWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	PostSignupWebauthnVerify(c *gin.Context)
	// Refresh access token
	// (POST /token)
	PostToken(c *gin.Context)
	// Verify JWT token
	// (POST /token/verify)
	PostTokenVerify(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
	// (POST /user/deanonymize)
	PostUserDeanonymize(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	PostUserEmailSendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	PostUserMfa(c *gin.Context)
	// Change user password. The user must be authenticated or provide a ticket
	// (POST /user/password)
	PostUserPassword(c *gin.Context)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(c *gin.Context)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	PostUserWebauthnAdd(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	PostUserWebauthnVerify(c *gin.Context)
	// Verify tickets created by email verification, email passwordless authentication (magic link), or password reset
	// (GET /verify)
	GetVerify(c *gin.Context, params GetVerifyParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetWellKnownJwksJson operation middleware
func (siw *ServerInterfaceWrapper) GetWellKnownJwksJson(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWellKnownJwksJson(c)
}

// PostElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) PostElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostElevateWebauthn(c)
}

// PostElevateWebauthnVerify operation middleware
func (siw *ServerInterfaceWrapper) PostElevateWebauthnVerify(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostElevateWebauthnVerify(c)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthz(c)
}

// HeadHealthz operation middleware
func (siw *ServerInterfaceWrapper) HeadHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HeadHealthz(c)
}

// PostLinkIdtoken operation middleware
func (siw *ServerInterfaceWrapper) PostLinkIdtoken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLinkIdtoken(c)
}

// GetMfaTotpGenerate operation middleware
func (siw *ServerInterfaceWrapper) GetMfaTotpGenerate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMfaTotpGenerate(c)
}

// PostPat operation middleware
func (siw *ServerInterfaceWrapper) PostPat(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPat(c)
}

// PostSigninAnonymous operation middleware
func (siw *ServerInterfaceWrapper) PostSigninAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninAnonymous(c)
}

// PostSigninEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSigninEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninEmailPassword(c)
}

// PostSigninIdtoken operation middleware
func (siw *ServerInterfaceWrapper) PostSigninIdtoken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninIdtoken(c)
}

// PostSigninMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) PostSigninMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninMfaTotp(c)
}

// PostSigninOtpEmail operation middleware
func (siw *ServerInterfaceWrapper) PostSigninOtpEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninOtpEmail(c)
}

// PostSigninOtpEmailVerify operation middleware
func (siw *ServerInterfaceWrapper) PostSigninOtpEmailVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninOtpEmailVerify(c)
}

// PostSigninPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPasswordlessEmail(c)
}

// PostSigninPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPasswordlessSms(c)
}

// PostSigninPasswordlessSmsOtp operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPasswordlessSmsOtp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPasswordlessSmsOtp(c)
}

// PostSigninPat operation middleware
func (siw *ServerInterfaceWrapper) PostSigninPat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninPat(c)
}

// GetSigninProviderProvider operation middleware
func (siw *ServerInterfaceWrapper) GetSigninProviderProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider GetSigninProviderProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSigninProviderProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", true, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", c.Request.URL.Query(), &params.Metadata)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter metadata: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSigninProviderProvider(c, provider, params)
}

// GetSigninProviderProviderCallback operation middleware
func (siw *ServerInterfaceWrapper) GetSigninProviderProviderCallback(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider GetSigninProviderProviderCallbackParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSigninProviderProviderCallbackParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSigninProviderProviderCallback(c, provider, params)
}

// PostSigninProviderProviderCallback operation middleware
func (siw *ServerInterfaceWrapper) PostSigninProviderProviderCallback(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider PostSigninProviderProviderCallbackParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninProviderProviderCallback(c, provider)
}

// PostSigninWebauthn operation middleware
func (siw *ServerInterfaceWrapper) PostSigninWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninWebauthn(c)
}

// PostSigninWebauthnVerify operation middleware
func (siw *ServerInterfaceWrapper) PostSigninWebauthnVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninWebauthnVerify(c)
}

// PostSignout operation middleware
func (siw *ServerInterfaceWrapper) PostSignout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignout(c)
}

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// PostSignupWebauthn operation middleware
func (siw *ServerInterfaceWrapper) PostSignupWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupWebauthn(c)
}

// PostSignupWebauthnVerify operation middleware
func (siw *ServerInterfaceWrapper) PostSignupWebauthnVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupWebauthnVerify(c)
}

// PostToken operation middleware
func (siw *ServerInterfaceWrapper) PostToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostToken(c)
}

// PostTokenVerify operation middleware
func (siw *ServerInterfaceWrapper) PostTokenVerify(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTokenVerify(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// PostUserDeanonymize operation middleware
func (siw *ServerInterfaceWrapper) PostUserDeanonymize(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserDeanonymize(c)
}

// PostUserEmailChange operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailChange(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailChange(c)
}

// PostUserEmailSendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmailSendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserEmailSendVerificationEmail(c)
}

// PostUserMfa operation middleware
func (siw *ServerInterfaceWrapper) PostUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserMfa(c)
}

// PostUserPassword operation middleware
func (siw *ServerInterfaceWrapper) PostUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserPassword(c)
}

// PostUserPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostUserPasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserPasswordReset(c)
}

// PostUserWebauthnAdd operation middleware
func (siw *ServerInterfaceWrapper) PostUserWebauthnAdd(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserWebauthnAdd(c)
}

// PostUserWebauthnVerify operation middleware
func (siw *ServerInterfaceWrapper) PostUserWebauthnVerify(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserWebauthnVerify(c)
}

// GetVerify operation middleware
func (siw *ServerInterfaceWrapper) GetVerify(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVerifyParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVerify(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetWellKnownJwksJson)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.PostElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.PostElevateWebauthnVerify)
	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HeadHealthz)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.PostLinkIdtoken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.GetMfaTotpGenerate)
	router.POST(options.BaseURL+"/pat", wrapper.PostPat)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.PostSigninAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.PostSigninEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.PostSigninIdtoken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.PostSigninMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.PostSigninOtpEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.PostSigninOtpEmailVerify)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.PostSigninPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.PostSigninPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.PostSigninPasswordlessSmsOtp)
	router.POST(options.BaseURL+"/signin/pat", wrapper.PostSigninPat)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.GetSigninProviderProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.GetSigninProviderProviderCallback)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.PostSigninProviderProviderCallback)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.PostSigninWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.PostSigninWebauthnVerify)
	router.POST(options.BaseURL+"/signout", wrapper.PostSignout)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.PostSignupWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.PostSignupWebauthnVerify)
	router.POST(options.BaseURL+"/token", wrapper.PostToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.PostTokenVerify)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.PostUserDeanonymize)
	router.POST(options.BaseURL+"/user/email/change", wrapper.PostUserEmailChange)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.PostUserEmailSendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.PostUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.PostUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.PostUserPasswordReset)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.PostUserWebauthnAdd)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.PostUserWebauthnVerify)
	router.GET(options.BaseURL+"/verify", wrapper.GetVerify)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetWellKnownJwksJsonRequestObject struct {
}

type GetWellKnownJwksJsonResponseObject interface {
	VisitGetWellKnownJwksJsonResponse(w http.ResponseWriter) error
}

type GetWellKnownJwksJson200JSONResponse JWKSet

func (response GetWellKnownJwksJson200JSONResponse) VisitGetWellKnownJwksJsonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostElevateWebauthnRequestObject struct {
}

type PostElevateWebauthnResponseObject interface {
	VisitPostElevateWebauthnResponse(w http.ResponseWriter) error
}

type PostElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response PostElevateWebauthn200JSONResponse) VisitPostElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostElevateWebauthndefaultJSONResponse) VisitPostElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostElevateWebauthnVerifyRequestObject struct {
	Body *PostElevateWebauthnVerifyJSONRequestBody
}

type PostElevateWebauthnVerifyResponseObject interface {
	VisitPostElevateWebauthnVerifyResponse(w http.ResponseWriter) error
}

type PostElevateWebauthnVerify200JSONResponse SessionPayload

func (response PostElevateWebauthnVerify200JSONResponse) VisitPostElevateWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostElevateWebauthnVerifydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostElevateWebauthnVerifydefaultJSONResponse) VisitPostElevateWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(w http.ResponseWriter) error
}

type GetHealthz200JSONResponse OKResponse

func (response GetHealthz200JSONResponse) VisitGetHealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HeadHealthzRequestObject struct {
}

type HeadHealthzResponseObject interface {
	VisitHeadHealthzResponse(w http.ResponseWriter) error
}

type HeadHealthz200Response struct {
}

func (response HeadHealthz200Response) VisitHeadHealthzResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostLinkIdtokenRequestObject struct {
	Body *PostLinkIdtokenJSONRequestBody
}

type PostLinkIdtokenResponseObject interface {
	VisitPostLinkIdtokenResponse(w http.ResponseWriter) error
}

type PostLinkIdtoken200JSONResponse OKResponse

func (response PostLinkIdtoken200JSONResponse) VisitPostLinkIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLinkIdtokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostLinkIdtokendefaultJSONResponse) VisitPostLinkIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetMfaTotpGenerateRequestObject struct {
}

type GetMfaTotpGenerateResponseObject interface {
	VisitGetMfaTotpGenerateResponse(w http.ResponseWriter) error
}

type GetMfaTotpGenerate200JSONResponse TotpGenerateResponse

func (response GetMfaTotpGenerate200JSONResponse) VisitGetMfaTotpGenerateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMfaTotpGeneratedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetMfaTotpGeneratedefaultJSONResponse) VisitGetMfaTotpGenerateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPatRequestObject struct {
	Body *PostPatJSONRequestBody
}

type PostPatResponseObject interface {
	VisitPostPatResponse(w http.ResponseWriter) error
}

type PostPat200JSONResponse CreatePATResponse

func (response PostPat200JSONResponse) VisitPostPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPatdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostPatdefaultJSONResponse) VisitPostPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninAnonymousRequestObject struct {
	Body *PostSigninAnonymousJSONRequestBody
}

type PostSigninAnonymousResponseObject interface {
	VisitPostSigninAnonymousResponse(w http.ResponseWriter) error
}

type PostSigninAnonymous200JSONResponse SessionPayload

func (response PostSigninAnonymous200JSONResponse) VisitPostSigninAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninAnonymousdefaultJSONResponse) VisitPostSigninAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninEmailPasswordRequestObject struct {
	Body *PostSigninEmailPasswordJSONRequestBody
}

type PostSigninEmailPasswordResponseObject interface {
	VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSigninEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response PostSigninEmailPassword200JSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninEmailPassworddefaultJSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninIdtokenRequestObject struct {
	Body *PostSigninIdtokenJSONRequestBody
}

type PostSigninIdtokenResponseObject interface {
	VisitPostSigninIdtokenResponse(w http.ResponseWriter) error
}

type PostSigninIdtoken200JSONResponse SessionPayload

func (response PostSigninIdtoken200JSONResponse) VisitPostSigninIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninIdtokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninIdtokendefaultJSONResponse) VisitPostSigninIdtokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninMfaTotpRequestObject struct {
	Body *PostSigninMfaTotpJSONRequestBody
}

type PostSigninMfaTotpResponseObject interface {
	VisitPostSigninMfaTotpResponse(w http.ResponseWriter) error
}

type PostSigninMfaTotp200JSONResponse SessionPayload

func (response PostSigninMfaTotp200JSONResponse) VisitPostSigninMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninMfaTotpdefaultJSONResponse) VisitPostSigninMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninOtpEmailRequestObject struct {
	Body *PostSigninOtpEmailJSONRequestBody
}

type PostSigninOtpEmailResponseObject interface {
	VisitPostSigninOtpEmailResponse(w http.ResponseWriter) error
}

type PostSigninOtpEmail200JSONResponse OKResponse

func (response PostSigninOtpEmail200JSONResponse) VisitPostSigninOtpEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninOtpEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninOtpEmaildefaultJSONResponse) VisitPostSigninOtpEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninOtpEmailVerifyRequestObject struct {
	Body *PostSigninOtpEmailVerifyJSONRequestBody
}

type PostSigninOtpEmailVerifyResponseObject interface {
	VisitPostSigninOtpEmailVerifyResponse(w http.ResponseWriter) error
}

type PostSigninOtpEmailVerify200JSONResponse SignInOTPEmailVerifyResponse

func (response PostSigninOtpEmailVerify200JSONResponse) VisitPostSigninOtpEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninOtpEmailVerifydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninOtpEmailVerifydefaultJSONResponse) VisitPostSigninOtpEmailVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninPasswordlessEmailRequestObject struct {
	Body *PostSigninPasswordlessEmailJSONRequestBody
}

type PostSigninPasswordlessEmailResponseObject interface {
	VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error
}

type PostSigninPasswordlessEmail200JSONResponse OKResponse

func (response PostSigninPasswordlessEmail200JSONResponse) VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninPasswordlessEmaildefaultJSONResponse) VisitPostSigninPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSigninPasswordlessSmsRequestObject struct {
	Body *PostSigninPasswordlessSmsJSONRequestBody
}

type PostSigninPasswordlessSmsResponseObject interface {
	VisitPostSigninPasswordlessSmsResponse(w http.ResponseWriter) error
}

type PostSigninPasswordlessSms200JSONResponse OKResponse

func (response PostSigninPasswordlessSms200JSONResponse) VisitPostSigninPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPasswordlessSmsOtpRequestObject struct {
	Body *PostSigninPasswordlessSmsOtpJSONRequestBody
}

type PostSigninPasswordlessSmsOtpResponseObject interface {
	VisitPostSigninPasswordlessSmsOtpResponse(w http.ResponseWriter) error
}

type PostSigninPasswordlessSmsOtp200JSONResponse SignInPasswordlessSmsOtpResponse

func (response PostSigninPasswordlessSmsOtp200JSONResponse) VisitPostSigninPasswordlessSmsOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPatRequestObject struct {
	Body *PostSigninPatJSONRequestBody
}

type PostSigninPatResponseObject interface {
	VisitPostSigninPatResponse(w http.ResponseWriter) error
}

type PostSigninPat200JSONResponse SessionPayload

func (response PostSigninPat200JSONResponse) VisitPostSigninPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninPatdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSigninPatdefaultJSONResponse) VisitPostSigninPatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSigninProviderProviderRequestObject struct {
	Provider GetSigninProviderProviderParamsProvider `json:"provider"`
	Params   GetSigninProviderProviderParams
}

type GetSigninProviderProviderResponseObject interface {
	VisitGetSigninProviderProviderResponse(w http.ResponseWriter) error
}

type GetSigninProviderProvider302ResponseHeaders struct {
	Location string
}

type GetSigninProviderProvider302Response struct {
	Headers GetSigninProviderProvider302ResponseHeaders
}

func (response GetSigninProviderProvider302Response) VisitGetSigninProviderProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetSigninProviderProviderCallbackRequestObject struct {
	Provider GetSigninProviderProviderCallbackParamsProvider `json:"provider"`
	Params   GetSigninProviderProviderCallbackParams
}

type GetSigninProviderProviderCallbackResponseObject interface {
	VisitGetSigninProviderProviderCallbackResponse(w http.ResponseWriter) error
}

type GetSigninProviderProviderCallback302ResponseHeaders struct {
	Location string
}

type GetSigninProviderProviderCallback302Response struct {
	Headers GetSigninProviderProviderCallback302ResponseHeaders
}

func (response GetSigninProviderProviderCallback302Response) VisitGetSigninProviderProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type PostSigninProviderProviderCallbackRequestObject struct {
	Provider PostSigninProviderProviderCallbackParamsProvider `json:"provider"`
	Body     *PostSigninProviderProviderCallbackFormdataRequestBody
}

type PostSigninProviderProviderCallbackResponseObject interface {
	VisitPostSigninProviderProviderCallbackResponse(w http.ResponseWriter) error
}

type PostSigninProviderProviderCallback302ResponseHeaders struct {
	Location string
}

type PostSigninProviderProviderCallback302Response struct {
	Headers PostSigninProviderProviderCallback302ResponseHeaders
}

func (response PostSigninProviderProviderCallback302Response) VisitPostSigninProviderProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type PostSigninWebauthnRequestObject struct {
	Body *PostSigninWebauthnJSONRequestBody
}

type PostSigninWebauthnResponseObject interface {
	VisitPostSigninWebauthnResponse(w http.ResponseWriter) error
}

type PostSigninWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response PostSigninWebauthn200JSONResponse) VisitPostSigninWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninWebauthnVerifyRequestObject struct {
	Body *PostSigninWebauthnVerifyJSONRequestBody
}

type PostSigninWebauthnVerifyResponseObject interface {
	VisitPostSigninWebauthnVerifyResponse(w http.ResponseWriter) error
}

type PostSigninWebauthnVerify200JSONResponse SessionPayload

func (response PostSigninWebauthnVerify200JSONResponse) VisitPostSigninWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignoutRequestObject struct {
	Body *PostSignoutJSONRequestBody
}

type PostSignoutResponseObject interface {
	VisitPostSignoutResponse(w http.ResponseWriter) error
}

type PostSignout200JSONResponse OKResponse

func (response PostSignout200JSONResponse) VisitPostSignoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignoutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostSignoutdefaultJSONResponse) VisitPostSignoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupWebauthnRequestObject struct {
	Body *PostSignupWebauthnJSONRequestBody
}

type PostSignupWebauthnResponseObject interface {
	VisitPostSignupWebauthnResponse(w http.ResponseWriter) error
}

type PostSignupWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response PostSignupWebauthn200JSONResponse) VisitPostSignupWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupWebauthnVerifyRequestObject struct {
	Body *PostSignupWebauthnVerifyJSONRequestBody
}

type PostSignupWebauthnVerifyResponseObject interface {
	VisitPostSignupWebauthnVerifyResponse(w http.ResponseWriter) error
}

type PostSignupWebauthnVerify200JSONResponse SessionPayload

func (response PostSignupWebauthnVerify200JSONResponse) VisitPostSignupWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTokenRequestObject struct {
	Body *PostTokenJSONRequestBody
}

type PostTokenResponseObject interface {
	VisitPostTokenResponse(w http.ResponseWriter) error
}

type PostToken200JSONResponse Session

func (response PostToken200JSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostTokendefaultJSONResponse) VisitPostTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostTokenVerifyRequestObject struct {
	Body *PostTokenVerifyJSONRequestBody
}

type PostTokenVerifyResponseObject interface {
	VisitPostTokenVerifyResponse(w http.ResponseWriter) error
}

type PostTokenVerify200JSONResponse string

func (response PostTokenVerify200JSONResponse) VisitPostTokenVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserDeanonymizeRequestObject struct {
	Body *PostUserDeanonymizeJSONRequestBody
}

type PostUserDeanonymizeResponseObject interface {
	VisitPostUserDeanonymizeResponse(w http.ResponseWriter) error
}

type PostUserDeanonymize200JSONResponse OKResponse

func (response PostUserDeanonymize200JSONResponse) VisitPostUserDeanonymizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserDeanonymizedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserDeanonymizedefaultJSONResponse) VisitPostUserDeanonymizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserEmailChangeRequestObject struct {
	Body *PostUserEmailChangeJSONRequestBody
}

type PostUserEmailChangeResponseObject interface {
	VisitPostUserEmailChangeResponse(w http.ResponseWriter) error
}

type PostUserEmailChange200JSONResponse OKResponse

func (response PostUserEmailChange200JSONResponse) VisitPostUserEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailChangedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserEmailChangedefaultJSONResponse) VisitPostUserEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserEmailSendVerificationEmailRequestObject struct {
	Body *PostUserEmailSendVerificationEmailJSONRequestBody
}

type PostUserEmailSendVerificationEmailResponseObject interface {
	VisitPostUserEmailSendVerificationEmailResponse(w http.ResponseWriter) error
}

type PostUserEmailSendVerificationEmail200JSONResponse OKResponse

func (response PostUserEmailSendVerificationEmail200JSONResponse) VisitPostUserEmailSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserEmailSendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserEmailSendVerificationEmaildefaultJSONResponse) VisitPostUserEmailSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserMfaRequestObject struct {
	Body *PostUserMfaJSONRequestBody
}

type PostUserMfaResponseObject interface {
	VisitPostUserMfaResponse(w http.ResponseWriter) error
}

type PostUserMfa200JSONResponse OKResponse

func (response PostUserMfa200JSONResponse) VisitPostUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserMfadefaultJSONResponse) VisitPostUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserPasswordRequestObject struct {
	Body *PostUserPasswordJSONRequestBody
}

type PostUserPasswordResponseObject interface {
	VisitPostUserPasswordResponse(w http.ResponseWriter) error
}

type PostUserPassword200JSONResponse OKResponse

func (response PostUserPassword200JSONResponse) VisitPostUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserPassworddefaultJSONResponse) VisitPostUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserPasswordResetRequestObject struct {
	Body *PostUserPasswordResetJSONRequestBody
}

type PostUserPasswordResetResponseObject interface {
	VisitPostUserPasswordResetResponse(w http.ResponseWriter) error
}

type PostUserPasswordReset200JSONResponse OKResponse

func (response PostUserPasswordReset200JSONResponse) VisitPostUserPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserPasswordResetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserPasswordResetdefaultJSONResponse) VisitPostUserPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserWebauthnAddRequestObject struct {
}

type PostUserWebauthnAddResponseObject interface {
	VisitPostUserWebauthnAddResponse(w http.ResponseWriter) error
}

type PostUserWebauthnAdd200JSONResponse PublicKeyCredentialCreationOptions

func (response PostUserWebauthnAdd200JSONResponse) VisitPostUserWebauthnAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserWebauthnAdddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserWebauthnAdddefaultJSONResponse) VisitPostUserWebauthnAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserWebauthnVerifyRequestObject struct {
	Body *PostUserWebauthnVerifyJSONRequestBody
}

type PostUserWebauthnVerifyResponseObject interface {
	VisitPostUserWebauthnVerifyResponse(w http.ResponseWriter) error
}

type PostUserWebauthnVerify200JSONResponse VerifyAddSecurityKeyResponse

func (response PostUserWebauthnVerify200JSONResponse) VisitPostUserWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserWebauthnVerifydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUserWebauthnVerifydefaultJSONResponse) VisitPostUserWebauthnVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVerifyRequestObject struct {
	Params GetVerifyParams
}

type GetVerifyResponseObject interface {
	VisitGetVerifyResponse(w http.ResponseWriter) error
}

type GetVerify302ResponseHeaders struct {
	Location string
}

type GetVerify302Response struct {
	Headers GetVerify302ResponseHeaders
}

func (response GetVerify302Response) VisitGetVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetWellKnownJwksJson(ctx context.Context, request GetWellKnownJwksJsonRequestObject) (GetWellKnownJwksJsonResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	PostElevateWebauthn(ctx context.Context, request PostElevateWebauthnRequestObject) (PostElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	PostElevateWebauthnVerify(ctx context.Context, request PostElevateWebauthnVerifyRequestObject) (PostElevateWebauthnVerifyResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HeadHealthz(ctx context.Context, request HeadHealthzRequestObject) (HeadHealthzResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	PostLinkIdtoken(ctx context.Context, request PostLinkIdtokenRequestObject) (PostLinkIdtokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	GetMfaTotpGenerate(ctx context.Context, request GetMfaTotpGenerateRequestObject) (GetMfaTotpGenerateResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	PostPat(ctx context.Context, request PostPatRequestObject) (PostPatResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	PostSigninAnonymous(ctx context.Context, request PostSigninAnonymousRequestObject) (PostSigninAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(ctx context.Context, request PostSigninEmailPasswordRequestObject) (PostSigninEmailPasswordResponseObject, error)
	// Sign in with in an id token
	// (POST /signin/idtoken)
	PostSigninIdtoken(ctx context.Context, request PostSigninIdtokenRequestObject) (PostSigninIdtokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	PostSigninMfaTotp(ctx context.Context, request PostSigninMfaTotpRequestObject) (PostSigninMfaTotpResponseObject, error)
	// Sign in with a one time password sent to user's email. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/otp/email)
	PostSigninOtpEmail(ctx context.Context, request PostSigninOtpEmailRequestObject) (PostSigninOtpEmailResponseObject, error)
	// Verify OTP and return a session if validation is successful
	// (POST /signin/otp/email/verify)
	PostSigninOtpEmailVerify(ctx context.Context, request PostSigninOtpEmailVerifyRequestObject) (PostSigninOtpEmailVerifyResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	PostSigninPasswordlessEmail(ctx context.Context, request PostSigninPasswordlessEmailRequestObject) (PostSigninPasswordlessEmailResponseObject, error)
	// Sign in with a one time password sent to user's phone number. If the user doesn't exist, it will be created. The options object is optional and can be used to configure the user's when signing up a new user. It is ignored if the user already exists.
	// (POST /signin/passwordless/sms)
	PostSigninPasswordlessSms(ctx context.Context, request PostSigninPasswordlessSmsRequestObject) (PostSigninPasswordlessSmsResponseObject, error)
	// Verify SMS OTP and return a session if validation is successful
	// (POST /signin/passwordless/sms/otp)
	PostSigninPasswordlessSmsOtp(ctx context.Context, request PostSigninPasswordlessSmsOtpRequestObject) (PostSigninPasswordlessSmsOtpResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	PostSigninPat(ctx context.Context, request PostSigninPatRequestObject) (PostSigninPatResponseObject, error)
	// Sign in with an oauth2 provider
	// (GET /signin/provider/{provider})
	GetSigninProviderProvider(ctx context.Context, request GetSigninProviderProviderRequestObject) (GetSigninProviderProviderResponseObject, error)
	// Callback for oauth2 provider
	// (GET /signin/provider/{provider}/callback)
	GetSigninProviderProviderCallback(ctx context.Context, request GetSigninProviderProviderCallbackRequestObject) (GetSigninProviderProviderCallbackResponseObject, error)
	// Callback for oauth2 provider using form_post response mode
	// (POST /signin/provider/{provider}/callback)
	PostSigninProviderProviderCallback(ctx context.Context, request PostSigninProviderProviderCallbackRequestObject) (PostSigninProviderProviderCallbackResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	PostSigninWebauthn(ctx context.Context, request PostSigninWebauthnRequestObject) (PostSigninWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	PostSigninWebauthnVerify(ctx context.Context, request PostSigninWebauthnVerifyRequestObject) (PostSigninWebauthnVerifyResponseObject, error)
	// Sign out
	// (POST /signout)
	PostSignout(ctx context.Context, request PostSignoutRequestObject) (PostSignoutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	PostSignupWebauthn(ctx context.Context, request PostSignupWebauthnRequestObject) (PostSignupWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	PostSignupWebauthnVerify(ctx context.Context, request PostSignupWebauthnVerifyRequestObject) (PostSignupWebauthnVerifyResponseObject, error)
	// Refresh access token
	// (POST /token)
	PostToken(ctx context.Context, request PostTokenRequestObject) (PostTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	PostTokenVerify(ctx context.Context, request PostTokenVerifyRequestObject) (PostTokenVerifyResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
	// (POST /user/deanonymize)
	PostUserDeanonymize(ctx context.Context, request PostUserDeanonymizeRequestObject) (PostUserDeanonymizeResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	PostUserEmailChange(ctx context.Context, request PostUserEmailChangeRequestObject) (PostUserEmailChangeResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	PostUserEmailSendVerificationEmail(ctx context.Context, request PostUserEmailSendVerificationEmailRequestObject) (PostUserEmailSendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	PostUserMfa(ctx context.Context, request PostUserMfaRequestObject) (PostUserMfaResponseObject, error)
	// Change user password. The user must be authenticated or provide a ticket
	// (POST /user/password)
	PostUserPassword(ctx context.Context, request PostUserPasswordRequestObject) (PostUserPasswordResponseObject, error)
	// Request a password reset. An email with a verification link will be sent to the user's address
	// (POST /user/password/reset)
	PostUserPasswordReset(ctx context.Context, request PostUserPasswordResetRequestObject) (PostUserPasswordResetResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	PostUserWebauthnAdd(ctx context.Context, request PostUserWebauthnAddRequestObject) (PostUserWebauthnAddResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	PostUserWebauthnVerify(ctx context.Context, request PostUserWebauthnVerifyRequestObject) (PostUserWebauthnVerifyResponseObject, error)
	// Verify tickets created by email verification, email passwordless authentication (magic link), or password reset
	// (GET /verify)
	GetVerify(ctx context.Context, request GetVerifyRequestObject) (GetVerifyResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetWellKnownJwksJson operation middleware
func (sh *strictHandler) GetWellKnownJwksJson(ctx *gin.Context) {
	var request GetWellKnownJwksJsonRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWellKnownJwksJson(ctx, request.(GetWellKnownJwksJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWellKnownJwksJson")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWellKnownJwksJsonResponseObject); ok {
		if err := validResponse.VisitGetWellKnownJwksJsonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostElevateWebauthn operation middleware
func (sh *strictHandler) PostElevateWebauthn(ctx *gin.Context) {
	var request PostElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostElevateWebauthn(ctx, request.(PostElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitPostElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostElevateWebauthnVerify operation middleware
func (sh *strictHandler) PostElevateWebauthnVerify(ctx *gin.Context) {
	var request PostElevateWebauthnVerifyRequestObject

	var body PostElevateWebauthnVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostElevateWebauthnVerify(ctx, request.(PostElevateWebauthnVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostElevateWebauthnVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostElevateWebauthnVerifyResponseObject); ok {
		if err := validResponse.VisitPostElevateWebauthnVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx *gin.Context) {
	var request GetHealthzRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthz(ctx, request.(GetHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthzResponseObject); ok {
		if err := validResponse.VisitGetHealthzResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HeadHealthz operation middleware
func (sh *strictHandler) HeadHealthz(ctx *gin.Context) {
	var request HeadHealthzRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadHealthz(ctx, request.(HeadHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HeadHealthzResponseObject); ok {
		if err := validResponse.VisitHeadHealthzResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLinkIdtoken operation middleware
func (sh *strictHandler) PostLinkIdtoken(ctx *gin.Context) {
	var request PostLinkIdtokenRequestObject

	var body PostLinkIdtokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLinkIdtoken(ctx, request.(PostLinkIdtokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLinkIdtoken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostLinkIdtokenResponseObject); ok {
		if err := validResponse.VisitPostLinkIdtokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMfaTotpGenerate operation middleware
func (sh *strictHandler) GetMfaTotpGenerate(ctx *gin.Context) {
	var request GetMfaTotpGenerateRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMfaTotpGenerate(ctx, request.(GetMfaTotpGenerateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMfaTotpGenerate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMfaTotpGenerateResponseObject); ok {
		if err := validResponse.VisitGetMfaTotpGenerateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPat operation middleware
func (sh *strictHandler) PostPat(ctx *gin.Context) {
	var request PostPatRequestObject

	var body PostPatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPat(ctx, request.(PostPatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPatResponseObject); ok {
		if err := validResponse.VisitPostPatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninAnonymous operation middleware
func (sh *strictHandler) PostSigninAnonymous(ctx *gin.Context) {
	var request PostSigninAnonymousRequestObject

	var body PostSigninAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninAnonymous(ctx, request.(PostSigninAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninAnonymousResponseObject); ok {
		if err := validResponse.VisitPostSigninAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninEmailPassword operation middleware
func (sh *strictHandler) PostSigninEmailPassword(ctx *gin.Context) {
	var request PostSigninEmailPasswordRequestObject

	var body PostSigninEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninEmailPassword(ctx, request.(PostSigninEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSigninEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninIdtoken operation middleware
func (sh *strictHandler) PostSigninIdtoken(ctx *gin.Context) {
	var request PostSigninIdtokenRequestObject

	var body PostSigninIdtokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninIdtoken(ctx, request.(PostSigninIdtokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninIdtoken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninIdtokenResponseObject); ok {
		if err := validResponse.VisitPostSigninIdtokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninMfaTotp operation middleware
func (sh *strictHandler) PostSigninMfaTotp(ctx *gin.Context) {
	var request PostSigninMfaTotpRequestObject

	var body PostSigninMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninMfaTotp(ctx, request.(PostSigninMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninMfaTotpResponseObject); ok {
		if err := validResponse.VisitPostSigninMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninOtpEmail operation middleware
func (sh *strictHandler) PostSigninOtpEmail(ctx *gin.Context) {
	var request PostSigninOtpEmailRequestObject

	var body PostSigninOtpEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninOtpEmail(ctx, request.(PostSigninOtpEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninOtpEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninOtpEmailResponseObject); ok {
		if err := validResponse.VisitPostSigninOtpEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninOtpEmailVerify operation middleware
func (sh *strictHandler) PostSigninOtpEmailVerify(ctx *gin.Context) {
	var request PostSigninOtpEmailVerifyRequestObject

	var body PostSigninOtpEmailVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninOtpEmailVerify(ctx, request.(PostSigninOtpEmailVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninOtpEmailVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninOtpEmailVerifyResponseObject); ok {
		if err := validResponse.VisitPostSigninOtpEmailVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPasswordlessEmail operation middleware
func (sh *strictHandler) PostSigninPasswordlessEmail(ctx *gin.Context) {
	var request PostSigninPasswordlessEmailRequestObject

	var body PostSigninPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPasswordlessEmail(ctx, request.(PostSigninPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitPostSigninPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPasswordlessSms operation middleware
func (sh *strictHandler) PostSigninPasswordlessSms(ctx *gin.Context) {
	var request PostSigninPasswordlessSmsRequestObject

	var body PostSigninPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPasswordlessSms(ctx, request.(PostSigninPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitPostSigninPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPasswordlessSmsOtp operation middleware
func (sh *strictHandler) PostSigninPasswordlessSmsOtp(ctx *gin.Context) {
	var request PostSigninPasswordlessSmsOtpRequestObject

	var body PostSigninPasswordlessSmsOtpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPasswordlessSmsOtp(ctx, request.(PostSigninPasswordlessSmsOtpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPasswordlessSmsOtp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPasswordlessSmsOtpResponseObject); ok {
		if err := validResponse.VisitPostSigninPasswordlessSmsOtpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninPat operation middleware
func (sh *strictHandler) PostSigninPat(ctx *gin.Context) {
	var request PostSigninPatRequestObject

	var body PostSigninPatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninPat(ctx, request.(PostSigninPatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninPat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninPatResponseObject); ok {
		if err := validResponse.VisitPostSigninPatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSigninProviderProvider operation middleware
func (sh *strictHandler) GetSigninProviderProvider(ctx *gin.Context, provider GetSigninProviderProviderParamsProvider, params GetSigninProviderProviderParams) {
	var request GetSigninProviderProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSigninProviderProvider(ctx, request.(GetSigninProviderProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSigninProviderProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSigninProviderProviderResponseObject); ok {
		if err := validResponse.VisitGetSigninProviderProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSigninProviderProviderCallback operation middleware
func (sh *strictHandler) GetSigninProviderProviderCallback(ctx *gin.Context, provider GetSigninProviderProviderCallbackParamsProvider, params GetSigninProviderProviderCallbackParams) {
	var request GetSigninProviderProviderCallbackRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSigninProviderProviderCallback(ctx, request.(GetSigninProviderProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSigninProviderProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSigninProviderProviderCallbackResponseObject); ok {
		if err := validResponse.VisitGetSigninProviderProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninProviderProviderCallback operation middleware
func (sh *strictHandler) PostSigninProviderProviderCallback(ctx *gin.Context, provider PostSigninProviderProviderCallbackParamsProvider) {
	var request PostSigninProviderProviderCallbackRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body PostSigninProviderProviderCallbackFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninProviderProviderCallback(ctx, request.(PostSigninProviderProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninProviderProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninProviderProviderCallbackResponseObject); ok {
		if err := validResponse.VisitPostSigninProviderProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninWebauthn operation middleware
func (sh *strictHandler) PostSigninWebauthn(ctx *gin.Context) {
	var request PostSigninWebauthnRequestObject

	var body PostSigninWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninWebauthn(ctx, request.(PostSigninWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninWebauthnResponseObject); ok {
		if err := validResponse.VisitPostSigninWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSigninWebauthnVerify operation middleware
func (sh *strictHandler) PostSigninWebauthnVerify(ctx *gin.Context) {
	var request PostSigninWebauthnVerifyRequestObject

	var body PostSigninWebauthnVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninWebauthnVerify(ctx, request.(PostSigninWebauthnVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninWebauthnVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninWebauthnVerifyResponseObject); ok {
		if err := validResponse.VisitPostSigninWebauthnVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignout operation middleware
func (sh *strictHandler) PostSignout(ctx *gin.Context) {
	var request PostSignoutRequestObject

	var body PostSignoutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignout(ctx, request.(PostSignoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignoutResponseObject); ok {
		if err := validResponse.VisitPostSignoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupWebauthn operation middleware
func (sh *strictHandler) PostSignupWebauthn(ctx *gin.Context) {
	var request PostSignupWebauthnRequestObject

	var body PostSignupWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupWebauthn(ctx, request.(PostSignupWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupWebauthnResponseObject); ok {
		if err := validResponse.VisitPostSignupWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupWebauthnVerify operation middleware
func (sh *strictHandler) PostSignupWebauthnVerify(ctx *gin.Context) {
	var request PostSignupWebauthnVerifyRequestObject

	var body PostSignupWebauthnVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupWebauthnVerify(ctx, request.(PostSignupWebauthnVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupWebauthnVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupWebauthnVerifyResponseObject); ok {
		if err := validResponse.VisitPostSignupWebauthnVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostToken operation middleware
func (sh *strictHandler) PostToken(ctx *gin.Context) {
	var request PostTokenRequestObject

	var body PostTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostToken(ctx, request.(PostTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTokenResponseObject); ok {
		if err := validResponse.VisitPostTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTokenVerify operation middleware
func (sh *strictHandler) PostTokenVerify(ctx *gin.Context) {
	var request PostTokenVerifyRequestObject

	var body PostTokenVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTokenVerify(ctx, request.(PostTokenVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTokenVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTokenVerifyResponseObject); ok {
		if err := validResponse.VisitPostTokenVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserDeanonymize operation middleware
func (sh *strictHandler) PostUserDeanonymize(ctx *gin.Context) {
	var request PostUserDeanonymizeRequestObject

	var body PostUserDeanonymizeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserDeanonymize(ctx, request.(PostUserDeanonymizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserDeanonymize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserDeanonymizeResponseObject); ok {
		if err := validResponse.VisitPostUserDeanonymizeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailChange operation middleware
func (sh *strictHandler) PostUserEmailChange(ctx *gin.Context) {
	var request PostUserEmailChangeRequestObject

	var body PostUserEmailChangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailChange(ctx, request.(PostUserEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailChangeResponseObject); ok {
		if err := validResponse.VisitPostUserEmailChangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserEmailSendVerificationEmail operation middleware
func (sh *strictHandler) PostUserEmailSendVerificationEmail(ctx *gin.Context) {
	var request PostUserEmailSendVerificationEmailRequestObject

	var body PostUserEmailSendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserEmailSendVerificationEmail(ctx, request.(PostUserEmailSendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserEmailSendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserEmailSendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitPostUserEmailSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserMfa operation middleware
func (sh *strictHandler) PostUserMfa(ctx *gin.Context) {
	var request PostUserMfaRequestObject

	var body PostUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserMfa(ctx, request.(PostUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserMfaResponseObject); ok {
		if err := validResponse.VisitPostUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserPassword operation middleware
func (sh *strictHandler) PostUserPassword(ctx *gin.Context) {
	var request PostUserPasswordRequestObject

	var body PostUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserPassword(ctx, request.(PostUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserPasswordResponseObject); ok {
		if err := validResponse.VisitPostUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserPasswordReset operation middleware
func (sh *strictHandler) PostUserPasswordReset(ctx *gin.Context) {
	var request PostUserPasswordResetRequestObject

	var body PostUserPasswordResetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserPasswordReset(ctx, request.(PostUserPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserPasswordResetResponseObject); ok {
		if err := validResponse.VisitPostUserPasswordResetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserWebauthnAdd operation middleware
func (sh *strictHandler) PostUserWebauthnAdd(ctx *gin.Context) {
	var request PostUserWebauthnAddRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserWebauthnAdd(ctx, request.(PostUserWebauthnAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserWebauthnAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserWebauthnAddResponseObject); ok {
		if err := validResponse.VisitPostUserWebauthnAddResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserWebauthnVerify operation middleware
func (sh *strictHandler) PostUserWebauthnVerify(ctx *gin.Context) {
	var request PostUserWebauthnVerifyRequestObject

	var body PostUserWebauthnVerifyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserWebauthnVerify(ctx, request.(PostUserWebauthnVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserWebauthnVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUserWebauthnVerifyResponseObject); ok {
		if err := validResponse.VisitPostUserWebauthnVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVerify operation middleware
func (sh *strictHandler) GetVerify(ctx *gin.Context, params GetVerifyParams) {
	var request GetVerifyRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVerify(ctx, request.(GetVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVerify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVerifyResponseObject); ok {
		if err := validResponse.VisitGetVerifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
