// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(c *gin.Context)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSigninEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSigninEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSigninEmailPassword(c)
}

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signin/email-password", wrapper.PostSigninEmailPassword)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
}

type PostSigninEmailPasswordRequestObject struct {
	Body *PostSigninEmailPasswordJSONRequestBody
}

type PostSigninEmailPasswordResponseObject interface {
	VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSigninEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response PostSigninEmailPassword200JSONResponse) VisitPostSigninEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Sign in with email and password
	// (POST /signin/email-password)
	PostSigninEmailPassword(ctx context.Context, request PostSigninEmailPasswordRequestObject) (PostSigninEmailPasswordResponseObject, error)
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSigninEmailPassword operation middleware
func (sh *strictHandler) PostSigninEmailPassword(ctx *gin.Context) {
	var request PostSigninEmailPasswordRequestObject

	var body PostSigninEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSigninEmailPassword(ctx, request.(PostSigninEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSigninEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSigninEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSigninEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
