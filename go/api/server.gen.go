// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX32/bxg//Vw7X7xd7sSzX9rrGT8uGAEvRpUGdbA9NHmgdZV13P7TjyY6R+X8f7iTL",
	"sq00K9B1A/ZmHY/kh/yQNO+RZ1aX1qDxxGePnLICNcSfF85Z9x6ptIYwHJTOlui8xCjOrIinAilzsvTS",
	"Gj7jP93cXDPy4CtiGAyweG/A/aZEPuPSeFyi49sBj+JTCxetFvMFeCYFGi9zicR8gQzKUskMwuXaAR9w",
	"NJXmsw/RuDOgEkK3Qpfs5NKsQEmROPy9QvJ8wEkuTVUmQhIsFIpgQ4NUCSiHIDaJNElFyO9b3OSdNMsA",
	"WyMRLPtCrzQYljuJRqhNE/3u9omh7YAHONKhCNCbLO2v19j3AOziI2Y+AJgjUfR4zAhkGRLd2N8wCk+Q",
	"d+QXD6V0SJfxYm6dBl+T82ray5XD3CEVre3DyN/XUuaDmIkqOGRQ+SIw13BlHVsXaFhjKdwIdL759SYE",
	"+wC6VMHnOJt8u3iVT5JsujhLpq9xkpx99xoSMRWj/KWYjnEcEJbgA9V8xu/uFh9GyRkk+f3j6+3d3SJp",
	"P6fbJ393tV6OgxrvoboijAX6P4c5n/EX6b5X0qZR0ttw55jNLhNP5P0op58g+ho2yoI45Zv2hfAphLt6",
	"CSBPfciluS0vQvFfA9HaOjGPeqfuYoeckn/OYnOxWtzl8qMtzJC09MX3prDkh9Lywb7adgonabfRND0b",
	"V4T+rrm8DUVRB9CHcSdjNmdaGqkrzSYsK8BB5tHRAfC5dyOzjPl4YZ1IzqZ//D80pzRv0Sx9wWeT5/p5",
	"F1yL6f7J5L/bhwtCyPAB6rqT+hwU4eC42ZWyaxTvraq/BeZQKR986zA/Yu3ed6I6OpceNfWOieYAnINN",
	"+G4sB08HjmpT3bw1BycWhaRSweYKdLSwV3hjC8PmoUL61JTN4NhnbKhjcv3aJnsqWaPXRRbVNDzs+Bsf",
	"sDnuHfMeBHh4lpYW2+O24/GR59KRr0OOcfIBV9Ce1EGfdmSoo9tm7HxONazAg7t1qpfRzCF4FOf+YNoL",
	"8Jh4qbGXsn+K9K82ZaLgF3RhtRAHMTYZbjQW1ioEE1Rkz2i5jCMl/JWdZOZf9V8m6dxYs9G2or8W7H+x",
	"+wa8LKzBq0ov6hY8AdaRf17tuL97UB8vlG3PH7bioDMrWpIHbZt0y+RwCnRICSuNlyv8OYebgOG4mQ7T",
	"2J+0XUbue0egNLmtHxnGQ+Y76wenqiyt891mNzWrV+HkG2Lz+kbIYRiIvPC+pFmathrb4yKeo1vJDJm3",
	"7Hy/tobAlMywef40Xs5LyApk4+HoxMF6vR5CFA+tW6aNLqVvL3+8uJpfJOPhaFh4rSJ56DS9yxvPjZFZ",
	"mtIalkt0Q2nTeCUNzSy9agOMCPmAr9DV2x9/ORwNR/XihAZKyWd8Eo/ibCli8aT1iyetnzndTam0FPMb",
	"Wiuu6peCz/i1JT+PKge7Ia+LDMn/YMVmxxCaaKHzNEs/Ur2YUrtMPr/K9W2h28O69q7CeFC/SmNo49Ho",
	"ywE5XLmj96NSqeI2n1dKbZjDpSSPDsWQXVVKsWYlZxrBUP1nxVax5JtnkCRWohFNB09Hky8G/fC53oc8",
	"0sk0ZgUYSTpgaR/AEczZ1wMTdhy2lr5gS7lC06SqeX4zfJDkKc40qrQGt9njj0rNdSPaxT60CSwpjL66",
	"1PdveiP2BX+/3W63fwYAAP//exqZQPUQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
