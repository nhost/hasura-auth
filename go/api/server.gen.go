// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostSignupEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) PostSignupEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignupEmailPassword(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/signup/email-password", wrapper.PostSignupEmailPassword)
}

type PostSignupEmailPasswordRequestObject struct {
	Body *PostSignupEmailPasswordJSONRequestBody
}

type PostSignupEmailPasswordResponseObject interface {
	VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error
}

type PostSignupEmailPassword200JSONResponse SessionPayload

func (response PostSignupEmailPassword200JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword403JSONResponse ErrorResponse

func (response PostSignupEmailPassword403JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostSignupEmailPassword409JSONResponse ErrorResponse

func (response PostSignupEmailPassword409JSONResponse) VisitPostSignupEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Signup with email and password
	// (POST /signup/email-password)
	PostSignupEmailPassword(ctx context.Context, request PostSignupEmailPasswordRequestObject) (PostSignupEmailPasswordResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostSignupEmailPassword operation middleware
func (sh *strictHandler) PostSignupEmailPassword(ctx *gin.Context) {
	var request PostSignupEmailPasswordRequestObject

	var body PostSignupEmailPasswordJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignupEmailPassword(ctx, request.(PostSignupEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignupEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSignupEmailPasswordResponseObject); ok {
		if err := validResponse.VisitPostSignupEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXX2/bRgz/Kofrhr1Ylmt7W+OnZUOApejSoE62hyYPtI6yrrs/2vFkx8j83Yc7ybJs",
	"K80KdN2AvVnHI/kjfyTNe+SZ1aU1aDzx2SOnrEAN8eeFc9a9QyqtIQwHpbMlOi8xijMr4qlAypwsvbSG",
	"z/jPNzfXjDz4ihgGAyzeG3C/KZHPuDQel+j4dsCj+NTCRavFfAGeSYHGy1wiMV8gg7JUMoNwuXbABxxN",
	"pfnsfTTuDKiE0K3QJTu5NCtQUiQO/6iQPB9wkktTlYmQBAuFItjQIFUCyiGITSJNUhHy+xY3eSfNMsDW",
	"SATLvtArDYblTqIRatNEv7t9Ymg74AGOdCgC9CZL++s19j0Au/iAmQ8A5kgUPR4zAlmGRDf2d4zCE+Qd",
	"+cVDKR3SZbyYW6fB8xnPlQW/h2oqvaipcpg7pKI1fRj4u1rKfBAzUQV/DCpfBOIaqqxj6wINayyFG4HN",
	"17/dhFgfQJcquBxnk28X3+WTJJsuzpLpK5wkZ9+/gkRMxSh/KaZjHE/5gJfgA9N8xu/uFu9HyRkk+f3j",
	"q+3d3SJpP6fbJ393tV6OgxrvYboijPX5lcOcz/iLdN8qadMn6W24c0xml4gn0n6U04/wfA0bZUGc0k37",
	"OvgYwl25BJCnPuTS3JYXofavgWhtnZhHvVN3sUFOyT9nsbdYLe5y+cEWZkha+uIHU1jyQ2n5YF9sO4WT",
	"tNtomp6NK0J/21zehqKoA+jDuJMxmzMtjdSVZhOWFeAg8+joAPjcu5FZxny8sE4kZ9M/vw69Kc0bNEtf",
	"8NnkuXbeBddiun8y+W/34YIQMnyAuu6kPgdFODjudaXsGsU7q+pvgTlUygffOoyPWLv3naiOzqVHTb1T",
	"ojkA52ATvhvLwdOBo9pUN2/NwYlFIalUsLkCHS3sFV7bwrB5qJA+NWUzOPYZG+qYXL+2yZ5K1uh1kUU1",
	"DQ87/sYHbI57p7wHAR6epaXF9rjteHzkuXTk65BjnHzAFbQnddCnHRnq6LYZO59SDSvw4G6d6mU0cwge",
	"xbk/GPYCPCZeauyl7N8i/YtNmSj4FV3YLMRBjE2GG42FtQrBBBXZM1ou40gJf2UnmflP/ZdJOjfWbLSt",
	"6O8F+3/svgEvC2vwqt57+lqpI/+02nH/9KA+3ifbnj9sxUFnVrQkD9o26ZbJ4RTokBJWGi9X+EsONwHD",
	"cTMdprE/abuM3PeOQGlyW78xjIfMd9YPTlVZWue7zW5qVq/CyTfE5vWNkMMwEHnhfUmzNG01tsdFPEe3",
	"khkyb9n5fm0NgSmZYfP6abycl5AVyMbD0YmD9Xo9hCgeWrdMG11K31z+dHE1v0jGw9Gw8FpF8tBpeps3",
	"nhsjszSlNSyX6IbSpvFKGppZetUGGBHyAV+hq7c//nI4Go7qxQkNlJLP+CQexdlSxOJJ6wdPWr9yuptS",
	"aSnmN7RWXNUvBZ/xa0t+HlUOdkNeFxmS/9GKzY4hNNFC52WWfqB6MaV2mXx+levbQreHde1dhfGgfpTG",
	"0Maj0ecDcrhyR+9HpVLFbT6vlNowh0tJHh2KIbuqlGLNSs40gqH6z4qtYsk3zyBJrEQjmg6ejiafDfrh",
	"a70PeaSTacwKMJJ0wNK+fyOYsy8HJuw4bC19wZZyhaZJVfP6ZvggyVOcaVRpDW6zxx+VmutGtIt9aBNY",
	"Uhh9danvn/RG7Av+frvdbv8KAAD//y/ZIw70EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
